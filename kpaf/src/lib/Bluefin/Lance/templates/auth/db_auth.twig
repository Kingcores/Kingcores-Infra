<?php
//Don't edit this file which is generated by Bluefin Lance.
namespace {{ namespace }}\Auth;

use Bluefin\Auth\AuthInterface;
use Bluefin\Auth\AuthCode;
use Bluefin\Auth\Persistence\{{ persistence.type|pascal }};

class {{ authClassName }} implements AuthInterface
{
    private $_config;
    private $_authData;
    private $_persistence;

    public function __construct()
    {
        $this->_config = _C('auth.{{ authName }}');
        $this->_persistence = new {{ persistence.type|pascal }}('{{ authName }}', $this->_config);
    }

    public function getAuthUrl()
    {
        return $this->_config['authUrl'];
    }

    public function isAuthenticated()
    {
        $authData = $this->getAuthData();
        return isset($authData);
    }

    /**
     * @param null $fieldName
     * @return mixed
     */
    public function getAuthData($fieldName = null)
    {
        isset($this->_authData) || ($this->_authData = $this->_persistence->read());
        return isset($fieldName) ? $this->_authData[$fieldName] : $this->_authData;
    }

    public function reloadAuthData($userName = null)
    {
        isset($userName) || ($userName = $this->_authData['{{ identityColumn }}']);

        $condition = array('{{ identityColumn }}' => $userName);

        $model = new {{ modelClass }}($condition, {{ persistence.data|array_export|raw }});

        $this->_authData = $model->data();
        $this->_persistence->write($this->_authData);
    }

    public function authenticate($userName, $password)
    {
        $this->clearIdentity();

        try
        {
{% if entity.hasFeature('logical_deletion') %}
            $condition = array('{{ identityColumn }}' => $userName, 'is_deleted' => 0);
{% else %}
            $condition = array('{{ identityColumn }}' => $userName);
{% endif %}

            $selected = array('{{ credentialColumn }}');
{% for column in otherColumns %}
            array_push_unique($selected, '{{ column }}');
{% endfor %}

            $model = new {{ modelClass }}($condition, $selected);

            if ($model->isEmpty())
            {
                return AuthCode::FAILURE_IDENTITY_NOT_FOUND;
            }

            $actual = new {{ modelClass }}();

            $actual->reset($model->data());
            $actual->{{ credentialColumn }} = $password;

            $record = $actual->filterInputs(false, array('{{ credentialColumn }}'));

            if ($model->{{ credentialColumn }} != $record['{{ credentialColumn }}'])
            {
                return AuthCode::FAILURE_CREDENTIAL_INVALID;
            }

{% for column, condition in extraValidation %}
{% set columnName = entity.getField(column) %}
{% if condition is array %}
            if (!in_array($model->{{ columnName.getFieldName }}, {{ condition|array_export|raw }}))
{% else %}
            if ($model->{{ columnName.getFieldName }} != {{ condition|format_value|raw }})
{% endif %}
            {
                return AuthCode::FAILURE_IDENTITY_STATUS_INVALID;
            }
{% endfor %}

            $this->reloadAuthData($userName);

            return AuthCode::SUCCESS;
        }
        catch (\Exception $e)
        {
            \Bluefin\App::getInstance()->log()->err("Authentication failed. Message: {$e->getMessage()}, trace: " . $e->getTraceAsString());
            return AuthCode::FAILURE;
        }
    }

    public function clearIdentity()
    {
        $this->_persistence->clear();
        $this->_authData = null;
    }

    public function handleAuthenticationFailure()
    {

    }

    public function isAuthorized($resource = null, $operation = null)
    {

    }

    public function handleUnauthorizedAccess()
    {

    }
}
