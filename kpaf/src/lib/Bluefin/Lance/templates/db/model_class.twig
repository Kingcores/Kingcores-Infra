<?php
//Don't edit this file which is generated by Bluefin Lance.
namespace {{ namespace }}\Model\{{ schemaName }};

use Bluefin\Convention;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use {{ namespace }}\Model\{{ databaseClassName }};

use Zend_Db_Expr;

class {{ className }} extends Model
{
{% for fieldName, field in entity.getFields %}
    const {{ fieldName|const }} = '{{ fieldName }}';
{% endfor %}

{% for keyName, fkInfo in entity.getForeignKeys %}
    const WITH_{{ fkInfo[0]|const }} = '{{ entityName }}.{{ fkInfo[0] }}:{{ fkInfo[1] }}.{{ fkInfo[2] }}';
{% endfor %}

    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                {{ databaseClassName }}::getInstance(),
                '{{ entityName }}',
                {{ entity.getUniqueKeys|values|array_export|raw }},
                array(
{% for fieldName, field in entity.getFields %}
                    self::{{ fieldName|const }} => {{ field.getFilters|array_export|raw }},
{% endfor %}
                ),
                array(
{% for featureName, feature in entity.getFeatures %}
                    '{{ featureName }}' => true,
{% endfor %}
                ),
                array(
{% for keyName, fkInfo in entity.getForeignKeys %}
                    self::{{ fkInfo[0]|const }} => self::WITH_{{ fkInfo[0]|const }},
{% endfor %}
                )
            );
        }

        return self::$__metadata;
    }

    public function __construct($condition = null, $relation = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition, $relation);
        }
        else
        {
            $this->reset();
        }
    }
{% for fieldName, field in entity.getFields %}

    public function get{{ fieldName|pascal }}()
    {
        return $this->__get(self::{{ fieldName|const }});
    }

    public function set{{ fieldName|pascal }}($value)
    {
        return $this->__set(self::{{ fieldName|const }}, $value);
    }
{% endfor %}
{% for keyName, fkInfo in entity.getForeignKeys %}
{% set modelClass = db.getModelClass(fkInfo[1]) %}

    /**
     * @throws \Bluefin\Exception\ModelException
     * @param array $relation
     * @return {{ modelClass|raw }}
     */
    public function get{{ fkInfo[0]|pascal }}Data($relation = null)
    {
        if (isset($this->_links['{{ fkInfo[0] }}']))
        {
            return $this->_links['{{ fkInfo[0] }}'];
        }

        return ($this->_links['{{ fkInfo[0] }}'] = new {{ modelClass|raw }}($this->get{{ fkInfo[0]|pascal }}(), $relation));
    }
{% endfor %}
}