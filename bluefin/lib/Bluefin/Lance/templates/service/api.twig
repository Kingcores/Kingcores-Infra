<?php
//Don't edit this file which is generated by Bluefin Lance.
namespace {{ schema.getNamespace }}\API\{{ schema.getSchemaNamePascal }};

use Bluefin\App;
use Bluefin\Common;
use Bluefin\Service;
use Bluefin\Data\Model;
use Bluefin\Data\Database;

{% set stateClass = entity.getStateEntity.getCodeNamePascal %}
{% if stateClass %}
use {{ schema.getNamespace }}\Model\{{ schema.getSchemaNamePascal }}\{{ stateClass }};
{% endif %}
use {{ schema.getNamespace }}\Model\{{ schema.getSchemaNamePascal }}\{{ entity.getCodeNamePascal }};

class {{ entity.getCodeNamePascal }}API extends Service
{
{% set entityNameCamel = entity.getCodeName|camel %}
{% if entity.getService.create.API %}
    public function create()
    {
        $aclStatus = {{ entity.getCodeNamePascal }}::checkActionPermission(Model::OP_CREATE);
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        ${{ entityNameCamel }} = new {{ entity.getCodeNamePascal }}();
        ${{ entityNameCamel }}->reset($this->_app->request()->getPostParams());
        return ${{ entityNameCamel }}->insert();
    }

{% endif %}
{% if entity.getService.get %}
{% set info = entity.getService.get.API %}
    public function get(array $condition, array &$outputColumns = null, array &$paging = null)
    {
        $aclStatus = {{ entity.getCodeNamePascal }}::checkActionPermission(Model::OP_GET);

{% if info.SPECIFIC_ROLES %}
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            {{ entity.getCodeNamePascal }}::addRoleCondition(Model::OP_GET, $condition);
        }

{% else %}
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

{% endif %}
        return {{ entity.getCodeNamePascal }}::fetchRowsWithCount(
            $outputColumns,
            $condition,
            null,
            $orderBy,
            $paging,
            $outputColumns
        );
    }

{% endif %}
{% if entity.getService.update %}
{% set info = entity.getService.update.API %}
    public function update(${{ entity.getPrimaryKey|camel }})
    {
        ${{ entityNameCamel }} = new {{ entity.getCodeNamePascal }}(${{ entity.getPrimaryKey|camel }});
        _NON_EMPTY(${{ entityNameCamel }});

        $aclStatus = {{ entity.getCodeNamePascal }}::checkActionPermission(Model::OP_UPDATE, ${{ entityNameCamel }}->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        return ${{ entityNameCamel }}->apply($this->_app->request()->getPostParams())->update();
    }

{% endif %}
{% if entity.getService.delete %}
{% set info = entity.getService.delete.API %}
    public function delete(${{ entity.getPrimaryKey|camel }})
    {
        ${{ entityNameCamel }} = new {{ entity.getCodeNamePascal }}(${{ entity.getPrimaryKey|camel }});
        _NON_EMPTY(${{ entityNameCamel }});

        $aclStatus = {{ entity.getCodeNamePascal }}::checkActionPermission(Model::OP_DELETE, ${{ entityNameCamel }}->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        return ${{ entityNameCamel }}->delete();
    }

{% endif %}
{% for actionName, froms in actions %}

    public function do{{ actionName|pascal }}(${{ entity.getPrimaryKey|camel }})
    {
        {{ entity.getCodeNamePascal }}::do{{ actionName|pascal }}(${{ entity.getPrimaryKey|camel }}, $this->_app->request()->getPostParams());

        return 1;
    }
{% endfor %}
}
?>