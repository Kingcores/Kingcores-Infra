<?php
//Don't edit this file which is generated by Bluefin Lance.
//You can put custom business logic into a Business class under {{ schema.getNamespace }}\Business namespace.
namespace {{ schema.getNamespace }}\Model\{{ schema.getSchemaNamePascal }};

use Bluefin\App;
use Bluefin\Convention;
use Bluefin\VarText;
use Bluefin\Data\Type;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use Bluefin\Data\DbExpr;

class {{ entity.getCodeNamePascal }} extends Model
{
{% set entityNameCamel = entity.getCodeName|camel %}
{% if entity.getStateEntity %}
{% set stateClass = entity.getStateEntity.getCodeNamePascal %}
{% endif %}
{% for fieldName, field in entity.getFields %}
    const {{ fieldName|const }} = '{{ fieldName }}';
{% endfor %}

{% for keyName, fkInfo in entity.getForeignKeys %}
    const WITH_{{ fkInfo[0]|const }} = '{{ entity.getCodeName }}.{{ fkInfo[0] }}:{{ fkInfo[1] }}.{{ fkInfo[2] }}';
{% endfor %}

{% for action, froms in entity.getStateActions %}
    const TO_{{ action|const }} = '_{{ action }}';
{% endfor %}

    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                '{{ schema.getSchemaName }}',
                '{{ entity.getCodeName }}',
                '{{ entity.getPrimaryKey }}',
                [
{% for fieldName, field in entity.getFields %}
                    '{{ fieldName }}' => {{ field.getFilters|export|raw }},
{% endfor %}
                ],
                [
{% for featureName, feature in entity.getFeatures %}
                    '{{ featureName }}' => '{{ feature.getRelatedFields[0] }}',
{% endfor %}
{% if entity.getStateField %}
                    'has_states' => '{{ entity.getStateField }}',
{% endif %}
{% if entity.getUniqueKeys %}
                    'unique_keys' => {{ entity.getUniqueKeys|values|export|raw }},
{% endif %}
{% if entity.getPHPTriggers %}
                    'triggers' => {{ entity.getPHPTriggers|keys|export|raw }}
{% endif %}
                ],
                [
{% for keyName, fkInfo in entity.getForeignKeys %}
                    '{{ fkInfo[0] }}' => self::WITH_{{ fkInfo[0]|const }},
{% endfor %}
                ],
                [
{% for relationEntityName, relation in entity.getM2NRelations %}
                    '{{ relationEntityName }}' => {{ relation|export|raw }},
{% endfor %}
                ],
                [
                    Model::OP_CREATE => {{ entity.getService.create.ROLES|export|raw }},
                    Model::OP_GET => {{ entity.getService.get.ROLES|export|raw }},
                    Model::OP_UPDATE => {{ entity.getService.update.ROLES|export|raw }},
                    Model::OP_DELETE => {{ entity.getService.delete.ROLES|export|raw }},
{% for state, context in entity.getFST %}
{% if context.GET.ROLES %}
                    'get.{{state}}' => {{ context.GET.ROLES|export|raw }},
{% endif %}
{% endfor %}
{% for action, froms in entity.getStateActions %}
                    '_{{ action }}' => [{% for from in froms %}{% set info = entity.getFST[from]['TRANSITIONS'][action] %}'{{ from }}' => {{ info.ROLES|export|raw }}, {% endfor %}],
{% endfor %}
                ]
            );
        }

        return self::$__metadata;
    }
{% for actionName, froms in actions %}

    /**
     * @param {{ entity.getFields[entity.getPrimaryKey].getFieldType|typename }} ${{ entity.getPrimaryKey|camel }}
     * @param array $params
     * @return \{{ schema.getNamespace }}\Model\{{ schema.getSchemaNamePascal }}\{{ entity.getCodeNamePascal }}
     * @throws \Bluefin\Exception\RequestException
     */
    public static function do{{ actionName|pascal }}(${{ entity.getPrimaryKey|camel }}, array $params = null)
    {
        App::getInstance()->log()->verbose('{{ entity.getCodeNamePascal }}::do{{ actionName|pascal }}', 'diag');

        if (is_array(${{ entity.getPrimaryKey|camel }}))
        {
            ${{ entityNameCamel }} = new {{ entity.getCodeNamePascal }}();
            ${{ entityNameCamel }}->populate(${{ entity.getPrimaryKey|camel }});
            ${{ entity.getPrimaryKey|camel }} = ${{ entityNameCamel }}->pk();
        }
        else
        {
            ${{ entityNameCamel }} = new {{ entity.getCodeNamePascal }}(${{ entity.getPrimaryKey|camel }});
        }
        _NON_EMPTY(${{ entityNameCamel }});

        $aclStatus = self::checkActionPermission(self::TO_{{ actionName|const }}, ${{ entityNameCamel }}->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = ${{ entityNameCamel }}->get{{ entity.getStateField|pascal }}();
        $methodName = "{$currentState}To{{ actionName|pascal }}";
        return self::$methodName(${{ entity.getPrimaryKey|camel }}, $params, ${{ entityNameCamel }});
    }
{% for from in froms %}
{% set info = entity.getFST[from]['TRANSITIONS'][actionName] %}

    public static function {{ from|camel }}To{{ actionName|pascal }}(${{ entity.getPrimaryKey|camel }}, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('{{ entity.getCodeNamePascal }}::{{ from|camel }}To{{ actionName|pascal }}', 'diag');

{% if info.INPUT or info.UPDATE %}
        if (!isset($params)) throw new \Bluefin\Exception\InvalidRequestException();

{% endif %}
{% if info.UPDATE %}
        $fieldParams = array_get_all($params, {{ info.UPDATE|keys|export|raw }});
{% for arg, required in info.UPDATE %}
{% if required %}
        _ARG_EXISTS('{{ arg }}', $fieldParams);
{% endif %}
{% endfor %}

{% endif %}
{% if info.INPUT %}
        $inputParams = array_get_all($params, {{ info.INPUT|keys|export|raw }});
{% for arg, required in info.INPUT %}
{% if required %}
        _ARG_EXISTS('{{ arg }}', $inputParams);
{% endif %}
{% endfor %}

{% endif %}
        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                ${{ entityNameCamel }} = $cachedModel;
            }
            else
            {
                ${{ entityNameCamel }} = new {{ entity.getCodeNamePascal }}(${{ entity.getPrimaryKey|camel }});
                _NON_EMPTY(${{ entityNameCamel }});

                $aclStatus = self::checkActionPermission(self::TO_{{ actionName|const }}, ${{ entityNameCamel }}->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = ${{ entityNameCamel }}->get{{ entity.getStateField|pascal }}();
                if ($currentState != '{{ from }}')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            ${{ entityNameCamel }}->set{{ entity.getStateField|pascal }}({{ stateClass }}::{{ info.TARGET|const }});

{% if info.UPDATE %}
            //Apply input paramters
            ${{ entityNameCamel }}->apply($fieldParams);

{% endif %}
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
{% set targetState = entity.getFST[info.TARGET] %}
{% if targetState.BEFORE %}
            ${{ entityNameCamel }}->_before{{ info.TARGET|pascal }}({% if info.INPUT %}$inputParams{% endif %});
{% endif %}
            $affected = ${{ entityNameCamel }}->update(['{{ entity.getPrimaryKey }}' => ${{ entity.getPrimaryKey|camel }}, '{{ entity.getStateField }}' => '{{ from }}']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

{% if targetState.AFTER %}
            ${{ entityNameCamel }}->_after{{ info.TARGET|pascal }}({% if info.INPUT %}$inputParams{% endif %});
{% endif %}
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return ${{ entityNameCamel }};
    }
{% endfor %}
{% endfor %}

    public function __construct($condition = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition);
        }
        else
        {
            $this->reset();
        }
    }
{% if entity.getFeatures.owner_field %}

    public function owner()
    {
        return $this->__get('{{ entity.getFeatures.owner_field.getRelatedFields[0] }}');
    }
{% endif %}
{% if entity.getFeatures.creator_field %}

    public function creator()
    {
        return $this->__get('{{ entity.getFeatures.creator_field.getRelatedFields[0] }}');
    }
{% endif %}
{% for fieldName, field in entity.getFields %}

    /**
     * Gets {{ field.getComment|lower }}
     * @return {{ field.getFieldType|typename }}
     */
    public function get{{ fieldName|pascal }}()
    {
        return $this->__get(self::{{ fieldName|const }});
    }

{% if field.getFilters.enum %}
    /**
     * Gets {{ field.getComment|lower }} display name
     * @return string
     */
    public function get{{ fieldName|pascal }}_EnumValue()
    {
        $option = $this->metadata()->getFilterOption('{{ fieldName }}');
        return $option['enum']::getDisplayName($this->__get(self::{{ fieldName|const }}));
    }

{% endif %}
{% if field.getFilters.state %}
    /**
     * Gets {{ field.getComment|lower }} display name
     * @return string
     */
    public function get{{ fieldName|pascal }}_StateValue()
    {
        $option = $this->metadata()->getFilterOption('{{ fieldName }}');
        return $option['state']::getDisplayName($this->__get(self::{{ fieldName|const }}));
    }

{% endif %}
    /**
     * Sets {{ field.getComment|lower }}
     * @param {{ field.getFieldType|typename }} $value
     * @return {{ entity.getCodeNamePascal }}
     */
    public function set{{ fieldName|pascal }}($value)
    {
        $this->__set(self::{{ fieldName|const }}, $value);

        return $this;
    }
{% endfor %}
{% for keyName, fkInfo in entity.getForeignKeys %}
{% set modelClass = schema.getEntityModelClass(fkInfo[1]|pascal) %}

    /**
     * @param bool $new
     * @return {{ modelClass|raw }}
     */
    public function get{{ fkInfo[0]|pascal }}_($new = false)
    {
        if ($new)
        {
            return new {{ modelClass|raw }}();
        }

        if (isset($this->_links['{{ fkInfo[0] }}']))
        {
            return $this->_links['{{ fkInfo[0] }}'];
        }

        return ($this->_links['{{ fkInfo[0] }}'] = new {{ modelClass|raw }}($this->get{{ fkInfo[0]|pascal }}()));
    }
{% endfor %}
{% for trigger, phpCode in entity.getPHPTriggers %}

    protected function _{{ trigger|const|camel }}()
    {
        App::getInstance()->log()->verbose('{{ entity.getCodeNamePascal }}::_{{ trigger|const|camel }}', 'diag');
{{ phpCode|pad_lines('        ')|raw }}
    }
{% endfor %}
{% for stateName, info in entity.getFST %}
{% if info.BEFORE %}

    protected function _before{{ stateName|pascal }}(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('{{ entity.getCodeNamePascal }}::_before{{ stateName|pascal }}', 'diag');    
{{ info.BEFORE|pad_lines('        ')|raw }}
    }
{% endif %}
{% if info.AFTER %}

    protected function _after{{ stateName|pascal }}(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('{{ entity.getCodeNamePascal }}::_after{{ stateName|pascal }}', 'diag');    
{{ info.AFTER|pad_lines('        ')|raw }}
    }
{% endif %}
{% endfor %}
}
?>