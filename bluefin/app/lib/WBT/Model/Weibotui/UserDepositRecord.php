<?php
//Don't edit this file which is generated by Bluefin Lance.
//You can put custom business logic into a Business class under WBT\Business namespace.
namespace WBT\Model\Weibotui;

use Bluefin\App;
use Bluefin\Convention;
use Bluefin\VarText;
use Bluefin\Data\Type;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use Bluefin\Data\DbExpr;

class UserDepositRecord extends Model
{
    const USER_DEPOSIT_RECORD_ID = 'user_deposit_record_id';
    const AMOUNT = 'amount';
    const DEPOSIT_BONUS = 'deposit_bonus';
    const POINTS_BONUS = 'points_bonus';
    const INVOICE_ISSUED = 'invoice_issued';
    const USER = 'user';
    const TRANSACTION = 'transaction';
    const INVOICE = 'invoice';
    const STATUS = 'status';
    const UNPAID_TIME = 'unpaid_time';
    const WAITING_TIME = 'waiting_time';
    const CANCELLED_TIME = 'cancelled_time';
    const PAID_TIME = 'paid_time';
    const STATUS_LOG = 'status_log';

    const WITH_USER = 'user_deposit_record.user:user.user_id';
    const WITH_TRANSACTION = 'user_deposit_record.transaction:income.serial_no';
    const WITH_INVOICE = 'user_deposit_record.invoice:invoice.invoice_id';

    const TO_CANCEL = '_cancel';
    const TO_PAY = '_pay';
    const TO_PAYMENT_SUCCEED = '_payment_succeed';
    const TO_PAYMENT_FAIL = '_payment_fail';

    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                'weibotui',
                'user_deposit_record',
                'user_deposit_record_id',
                [
                    'user_deposit_record_id' => ['name' => _META_('weibotui.user_deposit_record.user_deposit_record_id'), 'type' => 'int', 'length' => 10, 'min' => 1, 'required' => true, 'db_insert' => true, 'rou' => true],
                    'amount' => ['name' => _META_('weibotui.user_deposit_record.amount'), 'type' => 'money', 'min' => 0, 'rou' => true, 'precision' => 2, 'required' => true],
                    'deposit_bonus' => ['name' => _META_('weibotui.user_deposit_record.deposit_bonus'), 'type' => 'money', 'db_insert' => true, 'rou' => true, 'no_input' => true, 'precision' => 2, 'required' => true],
                    'points_bonus' => ['name' => _META_('weibotui.user_deposit_record.points_bonus'), 'type' => 'int', 'db_insert' => true, 'rou' => true, 'no_input' => true, 'required' => true],
                    'invoice_issued' => ['name' => _META_('weibotui.user_deposit_record.invoice_issued'), 'type' => 'bool', 'db_insert' => true, 'no_input' => true, 'required' => true],
                    'user' => ['name' => _META_('weibotui.user_deposit_record.user'), 'type' => 'int', 'length' => 10, 'min' => 100000, 'required' => true, 'default' => new \Bluefin\Data\Functor\VarTextProvider("{{auth.weibotui.user_id}}")],
                    'transaction' => ['name' => _META_('weibotui.user_deposit_record.transaction'), 'type' => 'text', 'length' => 20],
                    'invoice' => ['name' => _META_('weibotui.user_deposit_record.invoice'), 'type' => 'int', 'length' => 10, 'min' => 1],
                    'status' => ['name' => _META_('weibotui.user_deposit_record.status'), 'type' => 'idname', 'required' => true, 'state' => new UserDepositStatus(), 'db_insert' => true],
                    'unpaid_time' => ['name' => _META_('weibotui.user_deposit_record.unpaid_time'), 'type' => 'datetime'],
                    'waiting_time' => ['name' => _META_('weibotui.user_deposit_record.waiting_time'), 'type' => 'datetime'],
                    'cancelled_time' => ['name' => _META_('weibotui.user_deposit_record.cancelled_time'), 'type' => 'datetime'],
                    'paid_time' => ['name' => _META_('weibotui.user_deposit_record.paid_time'), 'type' => 'datetime'],
                    'status_log' => ['name' => _META_('weibotui.user_deposit_record.status_log'), 'type' => 'text', 'max' => 1000, 'default' => 'unpaid'],
                ],
                [
                    'auto_increment_id' => 'user_deposit_record_id',
                    'owner_field' => 'user',
                    'has_states' => 'status',
                ],
                [
                    'user' => self::WITH_USER,
                    'transaction' => self::WITH_TRANSACTION,
                    'invoice' => self::WITH_INVOICE,
                ],
                [
                ],
                [
                    Model::OP_CREATE => ['weibotui' => ['advertiser']],
                    Model::OP_GET => NULL,
                    Model::OP_UPDATE => NULL,
                    Model::OP_DELETE => NULL,
                    '_cancel' => ['unpaid' => ['weibotui' => ['*owner*']], ],
                    '_pay' => ['unpaid' => ['weibotui' => ['*owner*']], ],
                    '_payment_succeed' => ['waiting' => ['weibotui' => ['*system*']], ],
                    '_payment_fail' => ['waiting' => ['weibotui' => ['*system*']], ],
                ]
            );
        }

        return self::$__metadata;
    }

    /**
     * @param int $userDepositRecordID
     * @param array $params
     * @return \WBT\Model\Weibotui\UserDepositRecord
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doCancel($userDepositRecordID, array $params = null)
    {
        App::getInstance()->log()->verbose('UserDepositRecord::doCancel', 'diag');

        if (is_array($userDepositRecordID))
        {
            $userDepositRecord = new UserDepositRecord();
            $userDepositRecord->populate($userDepositRecordID);
            $userDepositRecordID = $userDepositRecord->pk();
        }
        else
        {
            $userDepositRecord = new UserDepositRecord($userDepositRecordID);
        }
        _NON_EMPTY($userDepositRecord);

        $aclStatus = self::checkActionPermission(self::TO_CANCEL, $userDepositRecord->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $userDepositRecord->getStatus();
        $methodName = "{$currentState}ToCancel";
        return self::$methodName($userDepositRecordID, $params, $userDepositRecord);
    }

    public static function unpaidToCancel($userDepositRecordID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('UserDepositRecord::unpaidToCancel', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $userDepositRecord = $cachedModel;
            }
            else
            {
                $userDepositRecord = new UserDepositRecord($userDepositRecordID);
                _NON_EMPTY($userDepositRecord);

                $aclStatus = self::checkActionPermission(self::TO_CANCEL, $userDepositRecord->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $userDepositRecord->getStatus();
                if ($currentState != 'unpaid')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $userDepositRecord->setStatus(UserDepositStatus::CANCELLED);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $userDepositRecord->update(['user_deposit_record_id' => $userDepositRecordID, 'status' => 'unpaid']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $userDepositRecord;
    }

    /**
     * @param int $userDepositRecordID
     * @param array $params
     * @return \WBT\Model\Weibotui\UserDepositRecord
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doPay($userDepositRecordID, array $params = null)
    {
        App::getInstance()->log()->verbose('UserDepositRecord::doPay', 'diag');

        if (is_array($userDepositRecordID))
        {
            $userDepositRecord = new UserDepositRecord();
            $userDepositRecord->populate($userDepositRecordID);
            $userDepositRecordID = $userDepositRecord->pk();
        }
        else
        {
            $userDepositRecord = new UserDepositRecord($userDepositRecordID);
        }
        _NON_EMPTY($userDepositRecord);

        $aclStatus = self::checkActionPermission(self::TO_PAY, $userDepositRecord->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $userDepositRecord->getStatus();
        $methodName = "{$currentState}ToPay";
        return self::$methodName($userDepositRecordID, $params, $userDepositRecord);
    }

    public static function unpaidToPay($userDepositRecordID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('UserDepositRecord::unpaidToPay', 'diag');

        if (!isset($params)) throw new \Bluefin\Exception\InvalidRequestException();

        $inputParams = array_get_all($params, ['income_type', 'payment_method']);
        _ARG_EXISTS('income_type', $inputParams);
        _ARG_EXISTS('payment_method', $inputParams);

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $userDepositRecord = $cachedModel;
            }
            else
            {
                $userDepositRecord = new UserDepositRecord($userDepositRecordID);
                _NON_EMPTY($userDepositRecord);

                $aclStatus = self::checkActionPermission(self::TO_PAY, $userDepositRecord->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $userDepositRecord->getStatus();
                if ($currentState != 'unpaid')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $userDepositRecord->setStatus(UserDepositStatus::WAITING);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $userDepositRecord->_beforeWaiting($inputParams);
            $affected = $userDepositRecord->update(['user_deposit_record_id' => $userDepositRecordID, 'status' => 'unpaid']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $userDepositRecord;
    }

    /**
     * @param int $userDepositRecordID
     * @param array $params
     * @return \WBT\Model\Weibotui\UserDepositRecord
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doPaymentSucceed($userDepositRecordID, array $params = null)
    {
        App::getInstance()->log()->verbose('UserDepositRecord::doPaymentSucceed', 'diag');

        if (is_array($userDepositRecordID))
        {
            $userDepositRecord = new UserDepositRecord();
            $userDepositRecord->populate($userDepositRecordID);
            $userDepositRecordID = $userDepositRecord->pk();
        }
        else
        {
            $userDepositRecord = new UserDepositRecord($userDepositRecordID);
        }
        _NON_EMPTY($userDepositRecord);

        $aclStatus = self::checkActionPermission(self::TO_PAYMENT_SUCCEED, $userDepositRecord->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $userDepositRecord->getStatus();
        $methodName = "{$currentState}ToPaymentSucceed";
        return self::$methodName($userDepositRecordID, $params, $userDepositRecord);
    }

    public static function waitingToPaymentSucceed($userDepositRecordID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('UserDepositRecord::waitingToPaymentSucceed', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $userDepositRecord = $cachedModel;
            }
            else
            {
                $userDepositRecord = new UserDepositRecord($userDepositRecordID);
                _NON_EMPTY($userDepositRecord);

                $aclStatus = self::checkActionPermission(self::TO_PAYMENT_SUCCEED, $userDepositRecord->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $userDepositRecord->getStatus();
                if ($currentState != 'waiting')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $userDepositRecord->setStatus(UserDepositStatus::PAID);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $userDepositRecord->update(['user_deposit_record_id' => $userDepositRecordID, 'status' => 'waiting']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $userDepositRecord->_afterPaid();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $userDepositRecord;
    }

    /**
     * @param int $userDepositRecordID
     * @param array $params
     * @return \WBT\Model\Weibotui\UserDepositRecord
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doPaymentFail($userDepositRecordID, array $params = null)
    {
        App::getInstance()->log()->verbose('UserDepositRecord::doPaymentFail', 'diag');

        if (is_array($userDepositRecordID))
        {
            $userDepositRecord = new UserDepositRecord();
            $userDepositRecord->populate($userDepositRecordID);
            $userDepositRecordID = $userDepositRecord->pk();
        }
        else
        {
            $userDepositRecord = new UserDepositRecord($userDepositRecordID);
        }
        _NON_EMPTY($userDepositRecord);

        $aclStatus = self::checkActionPermission(self::TO_PAYMENT_FAIL, $userDepositRecord->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $userDepositRecord->getStatus();
        $methodName = "{$currentState}ToPaymentFail";
        return self::$methodName($userDepositRecordID, $params, $userDepositRecord);
    }

    public static function waitingToPaymentFail($userDepositRecordID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('UserDepositRecord::waitingToPaymentFail', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $userDepositRecord = $cachedModel;
            }
            else
            {
                $userDepositRecord = new UserDepositRecord($userDepositRecordID);
                _NON_EMPTY($userDepositRecord);

                $aclStatus = self::checkActionPermission(self::TO_PAYMENT_FAIL, $userDepositRecord->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $userDepositRecord->getStatus();
                if ($currentState != 'waiting')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $userDepositRecord->setStatus(UserDepositStatus::UNPAID);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $userDepositRecord->update(['user_deposit_record_id' => $userDepositRecordID, 'status' => 'waiting']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $userDepositRecord;
    }

    public function __construct($condition = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition);
        }
        else
        {
            $this->reset();
        }
    }

    public function owner()
    {
        return $this->__get('user');
    }

    /**
     * Gets id
     * @return int
     */
    public function getUserDepositRecordID()
    {
        return $this->__get(self::USER_DEPOSIT_RECORD_ID);
    }

    /**
     * Sets id
     * @param int $value
     * @return UserDepositRecord
     */
    public function setUserDepositRecordID($value)
    {
        $this->__set(self::USER_DEPOSIT_RECORD_ID, $value);

        return $this;
    }

    /**
     * Gets 充值金额
     * @return float
     */
    public function getAmount()
    {
        return $this->__get(self::AMOUNT);
    }

    /**
     * Sets 充值金额
     * @param float $value
     * @return UserDepositRecord
     */
    public function setAmount($value)
    {
        $this->__set(self::AMOUNT, $value);

        return $this;
    }

    /**
     * Gets 充值奖励
     * @return float
     */
    public function getDepositBonus()
    {
        return $this->__get(self::DEPOSIT_BONUS);
    }

    /**
     * Sets 充值奖励
     * @param float $value
     * @return UserDepositRecord
     */
    public function setDepositBonus($value)
    {
        $this->__set(self::DEPOSIT_BONUS, $value);

        return $this;
    }

    /**
     * Gets 积分奖励
     * @return int
     */
    public function getPointsBonus()
    {
        return $this->__get(self::POINTS_BONUS);
    }

    /**
     * Sets 积分奖励
     * @param int $value
     * @return UserDepositRecord
     */
    public function setPointsBonus($value)
    {
        $this->__set(self::POINTS_BONUS, $value);

        return $this;
    }

    /**
     * Gets 发票已开
     * @return bool
     */
    public function getInvoiceIssued()
    {
        return $this->__get(self::INVOICE_ISSUED);
    }

    /**
     * Sets 发票已开
     * @param bool $value
     * @return UserDepositRecord
     */
    public function setInvoiceIssued($value)
    {
        $this->__set(self::INVOICE_ISSUED, $value);

        return $this;
    }

    /**
     * Gets 用户
     * @return int
     */
    public function getUser()
    {
        return $this->__get(self::USER);
    }

    /**
     * Sets 用户
     * @param int $value
     * @return UserDepositRecord
     */
    public function setUser($value)
    {
        $this->__set(self::USER, $value);

        return $this;
    }

    /**
     * Gets 进款交易
     * @return string
     */
    public function getTransaction()
    {
        return $this->__get(self::TRANSACTION);
    }

    /**
     * Sets 进款交易
     * @param string $value
     * @return UserDepositRecord
     */
    public function setTransaction($value)
    {
        $this->__set(self::TRANSACTION, $value);

        return $this;
    }

    /**
     * Gets 发票
     * @return int
     */
    public function getInvoice()
    {
        return $this->__get(self::INVOICE);
    }

    /**
     * Sets 发票
     * @param int $value
     * @return UserDepositRecord
     */
    public function setInvoice($value)
    {
        $this->__set(self::INVOICE, $value);

        return $this;
    }

    /**
     * Gets 状态
     * @return string
     */
    public function getStatus()
    {
        return $this->__get(self::STATUS);
    }

    /**
     * Gets 状态 display name
     * @return string
     */
    public function getStatus_StateValue()
    {
        $option = $this->metadata()->getFilterOption('status');
        return $option['state']::getDisplayName($this->__get(self::STATUS));
    }

    /**
     * Sets 状态
     * @param string $value
     * @return UserDepositRecord
     */
    public function setStatus($value)
    {
        $this->__set(self::STATUS, $value);

        return $this;
    }

    /**
     * Gets 未支付时间
     * @return string
     */
    public function getUnpaidTime()
    {
        return $this->__get(self::UNPAID_TIME);
    }

    /**
     * Sets 未支付时间
     * @param string $value
     * @return UserDepositRecord
     */
    public function setUnpaidTime($value)
    {
        $this->__set(self::UNPAID_TIME, $value);

        return $this;
    }

    /**
     * Gets 支付中时间
     * @return string
     */
    public function getWaitingTime()
    {
        return $this->__get(self::WAITING_TIME);
    }

    /**
     * Sets 支付中时间
     * @param string $value
     * @return UserDepositRecord
     */
    public function setWaitingTime($value)
    {
        $this->__set(self::WAITING_TIME, $value);

        return $this;
    }

    /**
     * Gets 已取消时间
     * @return string
     */
    public function getCancelledTime()
    {
        return $this->__get(self::CANCELLED_TIME);
    }

    /**
     * Sets 已取消时间
     * @param string $value
     * @return UserDepositRecord
     */
    public function setCancelledTime($value)
    {
        $this->__set(self::CANCELLED_TIME, $value);

        return $this;
    }

    /**
     * Gets 已支付时间
     * @return string
     */
    public function getPaidTime()
    {
        return $this->__get(self::PAID_TIME);
    }

    /**
     * Sets 已支付时间
     * @param string $value
     * @return UserDepositRecord
     */
    public function setPaidTime($value)
    {
        $this->__set(self::PAID_TIME, $value);

        return $this;
    }

    /**
     * Gets 状态历史
     * @return string
     */
    public function getStatusLog()
    {
        return $this->__get(self::STATUS_LOG);
    }

    /**
     * Sets 状态历史
     * @param string $value
     * @return UserDepositRecord
     */
    public function setStatusLog($value)
    {
        $this->__set(self::STATUS_LOG, $value);

        return $this;
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\User
     */
    public function getUser_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\User();
        }

        if (isset($this->_links['user']))
        {
            return $this->_links['user'];
        }

        return ($this->_links['user'] = new \WBT\Model\Weibotui\User($this->getUser()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\Income
     */
    public function getTransaction_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\Income();
        }

        if (isset($this->_links['transaction']))
        {
            return $this->_links['transaction'];
        }

        return ($this->_links['transaction'] = new \WBT\Model\Weibotui\Income($this->getTransaction()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\Invoice
     */
    public function getInvoice_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\Invoice();
        }

        if (isset($this->_links['invoice']))
        {
            return $this->_links['invoice'];
        }

        return ($this->_links['invoice'] = new \WBT\Model\Weibotui\Invoice($this->getInvoice()));
    }

    protected function _beforeWaiting(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('UserDepositRecord::_beforeWaiting', 'diag');    
        $newTransaction = false;
        
        if (isset($this->transaction))
        {//曾经尝试支付过
            $transaction = $this->getTransaction_();
            _NON_EMPTY($transaction);
        
            if ($transaction->payment_method != $INPUT['payment_method'])
            {
                Income::doCancel($this->transaction);
                $newTransaction = true;
            }
        }
        else
        {
            $newTransaction = true;
        }
        
        if ($newTransaction)
        {
            $transaction = $this->getTransaction_(true);
            $transaction->type = $INPUT['income_type'];
            $transaction->serial_no = \WBT\Data\TransactionCode::getSerialNo($INPUT['income_type'], $this->pk());
            $transaction->total_amount = $this->amount;
            $transaction->payment_method = $INPUT['payment_method'];
            $transaction->insert();
        
            $this->transaction = $transaction->pk();
        }
        
    }

    protected function _afterPaid(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('UserDepositRecord::_afterPaid', 'diag');    
        //充值后更新储值账户余额
        $userAsset = new UserAsset($this->user);
        $userAsset->deposit_balance += $this->amount;
        $userAsset->update();
        
    }
}
?>