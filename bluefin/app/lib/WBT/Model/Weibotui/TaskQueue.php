<?php
//Don't edit this file which is generated by Bluefin Lance.
//You can put custom business logic into a Business class under WBT\Business namespace.
namespace WBT\Model\Weibotui;

use Bluefin\App;
use Bluefin\Convention;
use Bluefin\VarText;
use Bluefin\Data\Type;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use Bluefin\Data\DbExpr;

class TaskQueue extends Model
{
    const TASK_QUEUE_ID = 'task_queue_id';
    const _CREATED_AT = '_created_at';
    const _UPDATED_AT = '_updated_at';
    const PARAM = 'param';
    const EXECUTE_TIME = 'execute_time';
    const ERRNO = 'errno';
    const STATUS = 'status';



    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                'weibotui',
                'task_queue',
                'task_queue_id',
                [
                    'task_queue_id' => ['name' => _META_('weibotui.task_queue.task_queue_id'), 'type' => 'int', 'length' => 10, 'min' => 1, 'required' => true, 'db_insert' => true, 'rou' => true],
                    '_created_at' => ['name' => _META_('weibotui.task_queue._created_at'), 'type' => 'timestamp', 'required' => true, 'default' => new DbExpr('NOW()'), 'roc' => true, 'rou' => true],
                    '_updated_at' => ['name' => _META_('weibotui.task_queue._updated_at'), 'type' => 'timestamp', 'required' => true, 'db_insert' => true, 'roc' => true, 'rou' => true],
                    'param' => ['name' => _META_('weibotui.task_queue.param'), 'type' => 'text', 'required' => true],
                    'execute_time' => ['name' => _META_('weibotui.task_queue.execute_time'), 'type' => 'datetime', 'required' => true],
                    'errno' => ['name' => _META_('weibotui.task_queue.errno'), 'type' => 'int', 'db_insert' => true, 'required' => true],
                    'status' => ['name' => _META_('weibotui.task_queue.status'), 'type' => 'text', 'max' => 20, 'required' => true, 'enum' => new TaskStatus(), 'db_insert' => true],
                ],
                [
                    'auto_increment_id' => 'task_queue_id',
                    'create_timestamp' => '_created_at',
                    'update_timestamp' => '_updated_at',
                ],
                [
                ],
                [
                ],
                [
                    Model::OP_CREATE => NULL,
                    Model::OP_GET => NULL,
                    Model::OP_UPDATE => NULL,
                    Model::OP_DELETE => NULL,
                ]
            );
        }

        return self::$__metadata;
    }

    public function __construct($condition = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition);
        }
        else
        {
            $this->reset();
        }
    }

    /**
     * Gets id
     * @return int
     */
    public function getTaskQueueID()
    {
        return $this->__get(self::TASK_QUEUE_ID);
    }

    /**
     * Sets id
     * @param int $value
     * @return TaskQueue
     */
    public function setTaskQueueID($value)
    {
        $this->__set(self::TASK_QUEUE_ID, $value);

        return $this;
    }

    /**
     * Gets createdat
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->__get(self::_CREATED_AT);
    }

    /**
     * Sets createdat
     * @param string $value
     * @return TaskQueue
     */
    public function setCreatedAt($value)
    {
        $this->__set(self::_CREATED_AT, $value);

        return $this;
    }

    /**
     * Gets updatedat
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->__get(self::_UPDATED_AT);
    }

    /**
     * Sets updatedat
     * @param string $value
     * @return TaskQueue
     */
    public function setUpdatedAt($value)
    {
        $this->__set(self::_UPDATED_AT, $value);

        return $this;
    }

    /**
     * Gets 任务的参数
     * @return string
     */
    public function getParam()
    {
        return $this->__get(self::PARAM);
    }

    /**
     * Sets 任务的参数
     * @param string $value
     * @return TaskQueue
     */
    public function setParam($value)
    {
        $this->__set(self::PARAM, $value);

        return $this;
    }

    /**
     * Gets 任务执行时间
     * @return string
     */
    public function getExecuteTime()
    {
        return $this->__get(self::EXECUTE_TIME);
    }

    /**
     * Sets 任务执行时间
     * @param string $value
     * @return TaskQueue
     */
    public function setExecuteTime($value)
    {
        $this->__set(self::EXECUTE_TIME, $value);

        return $this;
    }

    /**
     * Gets 错误号，非0表示任务执行错误
     * @return int
     */
    public function getErrno()
    {
        return $this->__get(self::ERRNO);
    }

    /**
     * Sets 错误号，非0表示任务执行错误
     * @param int $value
     * @return TaskQueue
     */
    public function setErrno($value)
    {
        $this->__set(self::ERRNO, $value);

        return $this;
    }

    /**
     * Gets 任务状态
     * @return string
     */
    public function getStatus()
    {
        return $this->__get(self::STATUS);
    }

    /**
     * Gets 任务状态 display name
     * @return string
     */
    public function getStatus_EnumValue()
    {
        $option = $this->metadata()->getFilterOption('status');
        return $option['enum']::getDisplayName($this->__get(self::STATUS));
    }

    /**
     * Sets 任务状态
     * @param string $value
     * @return TaskQueue
     */
    public function setStatus($value)
    {
        $this->__set(self::STATUS, $value);

        return $this;
    }
}
?>