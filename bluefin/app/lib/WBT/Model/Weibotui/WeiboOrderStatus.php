<?php
//Don't edit this file which is generated by Bluefin Lance.
namespace WBT\Model\Weibotui;

use Bluefin\Convention;
use Bluefin\Data\ValidatorInterface;

class WeiboOrderStatus implements ValidatorInterface
{
    const UNPUBLISHED = 'unpublished';
    const PUBLISHED = 'published';
    const ACCEPTED = 'accepted';
    const REFUSED = 'refused';
    const EXPIRED = 'expired';
    const CANCELLED = 'cancelled';
    const SUBMITTED = 'submitted';
    const PAID = 'paid';
    const APPEALED = 'appealed';
    const PROCESSING = 'processing';
    const QUOLIFIED_ORDER = 'quolified_order';
    const BAD_ORDER = 'bad_order';
    const DELETED = 'deleted';

    private static $_data;

    public static function getDictionary()
    {
        if (!isset(self::$_data))
        {
            self::$_data = array(
                self::UNPUBLISHED => _META_('weibotui.weibo_order_status.unpublished'),
                self::PUBLISHED => _META_('weibotui.weibo_order_status.published'),
                self::ACCEPTED => _META_('weibotui.weibo_order_status.accepted'),
                self::REFUSED => _META_('weibotui.weibo_order_status.refused'),
                self::EXPIRED => _META_('weibotui.weibo_order_status.expired'),
                self::CANCELLED => _META_('weibotui.weibo_order_status.cancelled'),
                self::SUBMITTED => _META_('weibotui.weibo_order_status.submitted'),
                self::PAID => _META_('weibotui.weibo_order_status.paid'),
                self::APPEALED => _META_('weibotui.weibo_order_status.appealed'),
                self::PROCESSING => _META_('weibotui.weibo_order_status.processing'),
                self::QUOLIFIED_ORDER => _META_('weibotui.weibo_order_status.quolified_order'),
                self::BAD_ORDER => _META_('weibotui.weibo_order_status.bad_order'),
                self::DELETED => _META_('weibotui.weibo_order_status.deleted'),
            );
        }

        return self::$_data;
    }

    public static function getStates()
    {
        $data = self::getDictionary();
        return array_keys($data);
    }

    public static function getDisplayName($state)
    {
        $data = self::getDictionary();
        return $data[$state];
    }

    public static function getDefaultValue()
    {
        return self::UNPUBLISHED;
    }

    public function validate($value)
    {
        $data = self::getDictionary();
        return array_key_exists($value, $data);
    }
}