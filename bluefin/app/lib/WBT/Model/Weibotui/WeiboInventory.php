<?php
//Don't edit this file which is generated by Bluefin Lance.
//You can put custom business logic into a Business class under WBT\Business namespace.
namespace WBT\Model\Weibotui;

use Bluefin\App;
use Bluefin\Convention;
use Bluefin\VarText;
use Bluefin\Data\Type;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use Bluefin\Data\DbExpr;

class WeiboInventory extends Model
{
    const WEIBO_INVENTORY_ID = 'weibo_inventory_id';
    const _UPDATED_AT = '_updated_at';
    const _IS_DELETED = '_is_deleted';
    const NUM_AUDIENCE = 'num_audience';
    const ORIGINAL_PRICE = 'original_price';
    const CURRENT_PRICE = 'current_price';
    const SERVICE_CHARGE_RATE = 'service_charge_rate';
    const ADVERTISER_RATING = 'advertiser_rating';
    const AUDITOR_COMMENT = 'auditor_comment';
    const WEIBO = 'weibo';
    const USER = 'user';
    const TYPE = 'type';
    const STATUS = 'status';
    const UNAUDIT_TIME = 'unaudit_time';
    const AUDIT_FAILED_TIME = 'audit_failed_time';
    const AVAILABLE_TIME = 'available_time';
    const UNAVAILABLE_TIME = 'unavailable_time';
    const STATUS_LOG = 'status_log';
    const AUDITOR = 'auditor';

    const WITH_WEIBO = 'weibo_inventory.weibo:weibo.weibo_id';
    const WITH_USER = 'weibo_inventory.user:user.user_id';
    const WITH_AUDITOR = 'weibo_inventory.auditor:admin.admin_id';

    const TO_PASS_AUDIT = '_pass_audit';
    const TO_FAIL_AUDIT = '_fail_audit';
    const TO_RE_AUDIT = '_re_audit';
    const TO_OFF_SALE = '_off_sale';
    const TO_ON_SALE = '_on_sale';

    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                'weibotui',
                'weibo_inventory',
                'weibo_inventory_id',
                [
                    'weibo_inventory_id' => ['name' => _META_('weibotui.weibo_inventory.weibo_inventory_id'), 'type' => 'int', 'length' => 10, 'min' => 1, 'required' => true, 'db_insert' => true, 'rou' => true],
                    '_updated_at' => ['name' => _META_('weibotui.weibo_inventory._updated_at'), 'type' => 'timestamp', 'required' => true, 'db_insert' => true, 'roc' => true, 'rou' => true],
                    '_is_deleted' => ['name' => _META_('weibotui.weibo_inventory._is_deleted'), 'type' => 'bool', 'required' => true, 'db_insert' => true, 'roc' => true, 'rou' => true],
                    'num_audience' => ['name' => _META_('weibotui.weibo_inventory.num_audience'), 'type' => 'int', 'required' => true],
                    'original_price' => ['name' => _META_('weibotui.weibo_inventory.original_price'), 'type' => 'money', 'precision' => 2, 'required' => true],
                    'current_price' => ['name' => _META_('weibotui.weibo_inventory.current_price'), 'type' => 'money', 'precision' => 2, 'required' => true],
                    'service_charge_rate' => ['name' => _META_('weibotui.weibo_inventory.service_charge_rate'), 'type' => 'float', 'db_insert' => true, 'no_input' => true, 'required' => true],
                    'advertiser_rating' => ['name' => _META_('weibotui.weibo_inventory.advertiser_rating'), 'type' => 'int', 'length' => 1, 'db_insert' => true],
                    'auditor_comment' => ['name' => _META_('weibotui.weibo_inventory.auditor_comment'), 'type' => 'text', 'length' => 200],
                    'weibo' => ['name' => _META_('weibotui.weibo_inventory.weibo'), 'type' => 'uuid', 'required' => true, 'rou' => true],
                    'user' => ['name' => _META_('weibotui.weibo_inventory.user'), 'type' => 'int', 'length' => 10, 'min' => 100000, 'required' => true, 'default' => new \Bluefin\Data\InvalidData(), 'rou' => true],
                    'type' => ['name' => _META_('weibotui.weibo_inventory.type'), 'type' => 'text', 'max' => 20, 'required' => true, 'enum' => new WeiboCampaignType(), 'db_insert' => true],
                    'status' => ['name' => _META_('weibotui.weibo_inventory.status'), 'type' => 'idname', 'required' => true, 'state' => new InventoryStatus(), 'db_insert' => true],
                    'unaudit_time' => ['name' => _META_('weibotui.weibo_inventory.unaudit_time'), 'type' => 'datetime'],
                    'audit_failed_time' => ['name' => _META_('weibotui.weibo_inventory.audit_failed_time'), 'type' => 'datetime'],
                    'available_time' => ['name' => _META_('weibotui.weibo_inventory.available_time'), 'type' => 'datetime'],
                    'unavailable_time' => ['name' => _META_('weibotui.weibo_inventory.unavailable_time'), 'type' => 'datetime'],
                    'status_log' => ['name' => _META_('weibotui.weibo_inventory.status_log'), 'type' => 'text', 'max' => 1000, 'default' => 'unaudit'],
                    'auditor' => ['name' => _META_('weibotui.weibo_inventory.auditor'), 'type' => 'int', 'length' => 10, 'min' => 1000],
                ],
                [
                    'auto_increment_id' => 'weibo_inventory_id',
                    'update_timestamp' => '_updated_at',
                    'logical_deletion' => '_is_deleted',
                    'owner_field' => 'user',
                    'has_states' => 'status',
                    'triggers' => ['BEFORE-INSERT']
                ],
                [
                    'weibo' => self::WITH_WEIBO,
                    'user' => self::WITH_USER,
                    'auditor' => self::WITH_AUDITOR,
                ],
                [
                ],
                [
                    Model::OP_CREATE => NULL,
                    Model::OP_GET => NULL,
                    Model::OP_UPDATE => NULL,
                    Model::OP_DELETE => NULL,
                    '_pass_audit' => ['unaudit' => ['wbt_admin' => ['inventroy_auditor']], ],
                    '_fail_audit' => ['unaudit' => ['wbt_admin' => ['inventroy_auditor']], ],
                    '_re_audit' => ['audit_failed' => ['weibotui' => ['*owner*']], ],
                    '_off_sale' => ['available' => ['weibotui' => ['*owner*']], ],
                    '_on_sale' => ['unavailable' => ['weibotui' => ['*owner*']], ],
                ]
            );
        }

        return self::$__metadata;
    }

    /**
     * @param int $weiboInventoryID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboInventory
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doPassAudit($weiboInventoryID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::doPassAudit', 'diag');

        if (is_array($weiboInventoryID))
        {
            $weiboInventory = new WeiboInventory();
            $weiboInventory->populate($weiboInventoryID);
            $weiboInventoryID = $weiboInventory->pk();
        }
        else
        {
            $weiboInventory = new WeiboInventory($weiboInventoryID);
        }
        _NON_EMPTY($weiboInventory);

        $aclStatus = self::checkActionPermission(self::TO_PASS_AUDIT, $weiboInventory->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboInventory->getStatus();
        $methodName = "{$currentState}ToPassAudit";
        return self::$methodName($weiboInventoryID, $params, $weiboInventory);
    }

    public static function unauditToPassAudit($weiboInventoryID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::unauditToPassAudit', 'diag');

        if (!isset($params)) throw new \Bluefin\Exception\InvalidRequestException();

        $fieldParams = array_get_all($params, ['auditor_comment']);

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboInventory = $cachedModel;
            }
            else
            {
                $weiboInventory = new WeiboInventory($weiboInventoryID);
                _NON_EMPTY($weiboInventory);

                $aclStatus = self::checkActionPermission(self::TO_PASS_AUDIT, $weiboInventory->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboInventory->getStatus();
                if ($currentState != 'unaudit')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboInventory->setStatus(InventoryStatus::AVAILABLE);

            //Apply input paramters
            $weiboInventory->apply($fieldParams);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $weiboInventory->_beforeAvailable();
            $affected = $weiboInventory->update(['weibo_inventory_id' => $weiboInventoryID, 'status' => 'unaudit']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboInventory;
    }

    /**
     * @param int $weiboInventoryID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboInventory
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doFailAudit($weiboInventoryID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::doFailAudit', 'diag');

        if (is_array($weiboInventoryID))
        {
            $weiboInventory = new WeiboInventory();
            $weiboInventory->populate($weiboInventoryID);
            $weiboInventoryID = $weiboInventory->pk();
        }
        else
        {
            $weiboInventory = new WeiboInventory($weiboInventoryID);
        }
        _NON_EMPTY($weiboInventory);

        $aclStatus = self::checkActionPermission(self::TO_FAIL_AUDIT, $weiboInventory->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboInventory->getStatus();
        $methodName = "{$currentState}ToFailAudit";
        return self::$methodName($weiboInventoryID, $params, $weiboInventory);
    }

    public static function unauditToFailAudit($weiboInventoryID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::unauditToFailAudit', 'diag');

        if (!isset($params)) throw new \Bluefin\Exception\InvalidRequestException();

        $fieldParams = array_get_all($params, ['auditor_comment']);
        _ARG_EXISTS('auditor_comment', $fieldParams);

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboInventory = $cachedModel;
            }
            else
            {
                $weiboInventory = new WeiboInventory($weiboInventoryID);
                _NON_EMPTY($weiboInventory);

                $aclStatus = self::checkActionPermission(self::TO_FAIL_AUDIT, $weiboInventory->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboInventory->getStatus();
                if ($currentState != 'unaudit')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboInventory->setStatus(InventoryStatus::AUDIT_FAILED);

            //Apply input paramters
            $weiboInventory->apply($fieldParams);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $weiboInventory->_beforeAuditFailed();
            $affected = $weiboInventory->update(['weibo_inventory_id' => $weiboInventoryID, 'status' => 'unaudit']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboInventory;
    }

    /**
     * @param int $weiboInventoryID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboInventory
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doReAudit($weiboInventoryID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::doReAudit', 'diag');

        if (is_array($weiboInventoryID))
        {
            $weiboInventory = new WeiboInventory();
            $weiboInventory->populate($weiboInventoryID);
            $weiboInventoryID = $weiboInventory->pk();
        }
        else
        {
            $weiboInventory = new WeiboInventory($weiboInventoryID);
        }
        _NON_EMPTY($weiboInventory);

        $aclStatus = self::checkActionPermission(self::TO_RE_AUDIT, $weiboInventory->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboInventory->getStatus();
        $methodName = "{$currentState}ToReAudit";
        return self::$methodName($weiboInventoryID, $params, $weiboInventory);
    }

    public static function auditFailedToReAudit($weiboInventoryID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::auditFailedToReAudit', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboInventory = $cachedModel;
            }
            else
            {
                $weiboInventory = new WeiboInventory($weiboInventoryID);
                _NON_EMPTY($weiboInventory);

                $aclStatus = self::checkActionPermission(self::TO_RE_AUDIT, $weiboInventory->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboInventory->getStatus();
                if ($currentState != 'audit_failed')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboInventory->setStatus(InventoryStatus::UNAUDIT);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $weiboInventory->update(['weibo_inventory_id' => $weiboInventoryID, 'status' => 'audit_failed']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboInventory;
    }

    /**
     * @param int $weiboInventoryID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboInventory
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doOffSale($weiboInventoryID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::doOffSale', 'diag');

        if (is_array($weiboInventoryID))
        {
            $weiboInventory = new WeiboInventory();
            $weiboInventory->populate($weiboInventoryID);
            $weiboInventoryID = $weiboInventory->pk();
        }
        else
        {
            $weiboInventory = new WeiboInventory($weiboInventoryID);
        }
        _NON_EMPTY($weiboInventory);

        $aclStatus = self::checkActionPermission(self::TO_OFF_SALE, $weiboInventory->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboInventory->getStatus();
        $methodName = "{$currentState}ToOffSale";
        return self::$methodName($weiboInventoryID, $params, $weiboInventory);
    }

    public static function availableToOffSale($weiboInventoryID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::availableToOffSale', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboInventory = $cachedModel;
            }
            else
            {
                $weiboInventory = new WeiboInventory($weiboInventoryID);
                _NON_EMPTY($weiboInventory);

                $aclStatus = self::checkActionPermission(self::TO_OFF_SALE, $weiboInventory->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboInventory->getStatus();
                if ($currentState != 'available')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboInventory->setStatus(InventoryStatus::UNAVAILABLE);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $weiboInventory->update(['weibo_inventory_id' => $weiboInventoryID, 'status' => 'available']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboInventory;
    }

    /**
     * @param int $weiboInventoryID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboInventory
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doOnSale($weiboInventoryID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::doOnSale', 'diag');

        if (is_array($weiboInventoryID))
        {
            $weiboInventory = new WeiboInventory();
            $weiboInventory->populate($weiboInventoryID);
            $weiboInventoryID = $weiboInventory->pk();
        }
        else
        {
            $weiboInventory = new WeiboInventory($weiboInventoryID);
        }
        _NON_EMPTY($weiboInventory);

        $aclStatus = self::checkActionPermission(self::TO_ON_SALE, $weiboInventory->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboInventory->getStatus();
        $methodName = "{$currentState}ToOnSale";
        return self::$methodName($weiboInventoryID, $params, $weiboInventory);
    }

    public static function unavailableToOnSale($weiboInventoryID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::unavailableToOnSale', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboInventory = $cachedModel;
            }
            else
            {
                $weiboInventory = new WeiboInventory($weiboInventoryID);
                _NON_EMPTY($weiboInventory);

                $aclStatus = self::checkActionPermission(self::TO_ON_SALE, $weiboInventory->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboInventory->getStatus();
                if ($currentState != 'unavailable')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboInventory->setStatus(InventoryStatus::AVAILABLE);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $weiboInventory->_beforeAvailable();
            $affected = $weiboInventory->update(['weibo_inventory_id' => $weiboInventoryID, 'status' => 'unavailable']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboInventory;
    }

    public function __construct($condition = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition);
        }
        else
        {
            $this->reset();
        }
    }

    public function owner()
    {
        return $this->__get('user');
    }

    /**
     * Gets id
     * @return int
     */
    public function getWeiboInventoryID()
    {
        return $this->__get(self::WEIBO_INVENTORY_ID);
    }

    /**
     * Sets id
     * @param int $value
     * @return WeiboInventory
     */
    public function setWeiboInventoryID($value)
    {
        $this->__set(self::WEIBO_INVENTORY_ID, $value);

        return $this;
    }

    /**
     * Gets updatedat
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->__get(self::_UPDATED_AT);
    }

    /**
     * Sets updatedat
     * @param string $value
     * @return WeiboInventory
     */
    public function setUpdatedAt($value)
    {
        $this->__set(self::_UPDATED_AT, $value);

        return $this;
    }

    /**
     * Gets isdeleted
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->__get(self::_IS_DELETED);
    }

    /**
     * Sets isdeleted
     * @param bool $value
     * @return WeiboInventory
     */
    public function setIsDeleted($value)
    {
        $this->__set(self::_IS_DELETED, $value);

        return $this;
    }

    /**
     * Gets 受众人数
     * @return int
     */
    public function getNumAudience()
    {
        return $this->__get(self::NUM_AUDIENCE);
    }

    /**
     * Sets 受众人数
     * @param int $value
     * @return WeiboInventory
     */
    public function setNumAudience($value)
    {
        $this->__set(self::NUM_AUDIENCE, $value);

        return $this;
    }

    /**
     * Gets 原价
     * @return float
     */
    public function getOriginalPrice()
    {
        return $this->__get(self::ORIGINAL_PRICE);
    }

    /**
     * Sets 原价
     * @param float $value
     * @return WeiboInventory
     */
    public function setOriginalPrice($value)
    {
        $this->__set(self::ORIGINAL_PRICE, $value);

        return $this;
    }

    /**
     * Gets 现价
     * @return float
     */
    public function getCurrentPrice()
    {
        return $this->__get(self::CURRENT_PRICE);
    }

    /**
     * Sets 现价
     * @param float $value
     * @return WeiboInventory
     */
    public function setCurrentPrice($value)
    {
        $this->__set(self::CURRENT_PRICE, $value);

        return $this;
    }

    /**
     * Gets 服务费率
     * @return float
     */
    public function getServiceChargeRate()
    {
        return $this->__get(self::SERVICE_CHARGE_RATE);
    }

    /**
     * Sets 服务费率
     * @param float $value
     * @return WeiboInventory
     */
    public function setServiceChargeRate($value)
    {
        $this->__set(self::SERVICE_CHARGE_RATE, $value);

        return $this;
    }

    /**
     * Gets 广告主评价
     * @return int
     */
    public function getAdvertiserRating()
    {
        return $this->__get(self::ADVERTISER_RATING);
    }

    /**
     * Sets 广告主评价
     * @param int $value
     * @return WeiboInventory
     */
    public function setAdvertiserRating($value)
    {
        $this->__set(self::ADVERTISER_RATING, $value);

        return $this;
    }

    /**
     * Gets 审核备注
     * @return string
     */
    public function getAuditorComment()
    {
        return $this->__get(self::AUDITOR_COMMENT);
    }

    /**
     * Sets 审核备注
     * @param string $value
     * @return WeiboInventory
     */
    public function setAuditorComment($value)
    {
        $this->__set(self::AUDITOR_COMMENT, $value);

        return $this;
    }

    /**
     * Gets 微博账号
     * @return string
     */
    public function getWeibo()
    {
        return $this->__get(self::WEIBO);
    }

    /**
     * Sets 微博账号
     * @param string $value
     * @return WeiboInventory
     */
    public function setWeibo($value)
    {
        $this->__set(self::WEIBO, $value);

        return $this;
    }

    /**
     * Gets 推客
     * @return int
     */
    public function getUser()
    {
        return $this->__get(self::USER);
    }

    /**
     * Sets 推客
     * @param int $value
     * @return WeiboInventory
     */
    public function setUser($value)
    {
        $this->__set(self::USER, $value);

        return $this;
    }

    /**
     * Gets 活动类型
     * @return string
     */
    public function getType()
    {
        return $this->__get(self::TYPE);
    }

    /**
     * Gets 活动类型 display name
     * @return string
     */
    public function getType_EnumValue()
    {
        $option = $this->metadata()->getFilterOption('type');
        return $option['enum']::getDisplayName($this->__get(self::TYPE));
    }

    /**
     * Sets 活动类型
     * @param string $value
     * @return WeiboInventory
     */
    public function setType($value)
    {
        $this->__set(self::TYPE, $value);

        return $this;
    }

    /**
     * Gets 状态
     * @return string
     */
    public function getStatus()
    {
        return $this->__get(self::STATUS);
    }

    /**
     * Gets 状态 display name
     * @return string
     */
    public function getStatus_StateValue()
    {
        $option = $this->metadata()->getFilterOption('status');
        return $option['state']::getDisplayName($this->__get(self::STATUS));
    }

    /**
     * Sets 状态
     * @param string $value
     * @return WeiboInventory
     */
    public function setStatus($value)
    {
        $this->__set(self::STATUS, $value);

        return $this;
    }

    /**
     * Gets 未审核时间
     * @return string
     */
    public function getUnauditTime()
    {
        return $this->__get(self::UNAUDIT_TIME);
    }

    /**
     * Sets 未审核时间
     * @param string $value
     * @return WeiboInventory
     */
    public function setUnauditTime($value)
    {
        $this->__set(self::UNAUDIT_TIME, $value);

        return $this;
    }

    /**
     * Gets 不合格时间
     * @return string
     */
    public function getAuditFailedTime()
    {
        return $this->__get(self::AUDIT_FAILED_TIME);
    }

    /**
     * Sets 不合格时间
     * @param string $value
     * @return WeiboInventory
     */
    public function setAuditFailedTime($value)
    {
        $this->__set(self::AUDIT_FAILED_TIME, $value);

        return $this;
    }

    /**
     * Gets 可用时间
     * @return string
     */
    public function getAvailableTime()
    {
        return $this->__get(self::AVAILABLE_TIME);
    }

    /**
     * Sets 可用时间
     * @param string $value
     * @return WeiboInventory
     */
    public function setAvailableTime($value)
    {
        $this->__set(self::AVAILABLE_TIME, $value);

        return $this;
    }

    /**
     * Gets 暂停时间
     * @return string
     */
    public function getUnavailableTime()
    {
        return $this->__get(self::UNAVAILABLE_TIME);
    }

    /**
     * Sets 暂停时间
     * @param string $value
     * @return WeiboInventory
     */
    public function setUnavailableTime($value)
    {
        $this->__set(self::UNAVAILABLE_TIME, $value);

        return $this;
    }

    /**
     * Gets 状态历史
     * @return string
     */
    public function getStatusLog()
    {
        return $this->__get(self::STATUS_LOG);
    }

    /**
     * Sets 状态历史
     * @param string $value
     * @return WeiboInventory
     */
    public function setStatusLog($value)
    {
        $this->__set(self::STATUS_LOG, $value);

        return $this;
    }

    /**
     * Gets 审核员
     * @return int
     */
    public function getAuditor()
    {
        return $this->__get(self::AUDITOR);
    }

    /**
     * Sets 审核员
     * @param int $value
     * @return WeiboInventory
     */
    public function setAuditor($value)
    {
        $this->__set(self::AUDITOR, $value);

        return $this;
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\Weibo
     */
    public function getWeibo_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\Weibo();
        }

        if (isset($this->_links['weibo']))
        {
            return $this->_links['weibo'];
        }

        return ($this->_links['weibo'] = new \WBT\Model\Weibotui\Weibo($this->getWeibo()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\User
     */
    public function getUser_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\User();
        }

        if (isset($this->_links['user']))
        {
            return $this->_links['user'];
        }

        return ($this->_links['user'] = new \WBT\Model\Weibotui\User($this->getUser()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\Admin
     */
    public function getAuditor_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\Admin();
        }

        if (isset($this->_links['auditor']))
        {
            return $this->_links['auditor'];
        }

        return ($this->_links['auditor'] = new \WBT\Model\Weibotui\Admin($this->getAuditor()));
    }

    protected function _beforeInsert()
    {
        App::getInstance()->log()->verbose('WeiboInventory::_beforeInsert', 'diag');
        $weibo_ = $this->getWeibo_();
        $this->user = $weibo_->user;
        
    }

    protected function _beforeAuditFailed(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::_beforeAuditFailed', 'diag');    
        $this->auditor = App::getInstance()->auth('wbt_admin')->getUniqueID();
        
    }

    protected function _beforeAvailable(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboInventory::_beforeAvailable', 'diag');    
        $this->auditor = App::getInstance()->auth('wbt_admin')->getUniqueID();
        
    }
}
?>