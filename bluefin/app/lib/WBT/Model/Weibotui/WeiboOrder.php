<?php
//Don't edit this file which is generated by Bluefin Lance.
//You can put custom business logic into a Business class under WBT\Business namespace.
namespace WBT\Model\Weibotui;

use Bluefin\App;
use Bluefin\Convention;
use Bluefin\VarText;
use Bluefin\Data\Type;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use Bluefin\Data\DbExpr;

class WeiboOrder extends Model
{
    const WEIBO_ORDER_ID = 'weibo_order_id';
    const _IS_DELETED = '_is_deleted';
    const _TASK_ID = '_task_id';
    const PRICE = 'price';
    const SERVICE_CHARGE = 'service_charge';
    const NUM_AUDIENCE = 'num_audience';
    const ORDER_COMMENT = 'order_comment';
    const FINISH_URL = 'finish_url';
    const SNAPSHOT_URL = 'snapshot_url';
    const TUIKE_COMMENT = 'tuike_comment';
    const REFUSE_REASON = 'refuse_reason';
    const APPEAL_REASON = 'appeal_reason';
    const ADVERTISER_RATING = 'advertiser_rating';
    const ADVERTISER_COMMENT = 'advertiser_comment';
    const VERIFIER_COMMENT = 'verifier_comment';
    const CAMPAIGN = 'campaign';
    const INVENTORY = 'inventory';
    const ADVERTISER = 'advertiser';
    const TUIKE = 'tuike';
    const STATUS = 'status';
    const UNPUBLISHED_TIME = 'unpublished_time';
    const PUBLISHED_TIME = 'published_time';
    const ACCEPTED_TIME = 'accepted_time';
    const REFUSED_TIME = 'refused_time';
    const EXPIRED_TIME = 'expired_time';
    const CANCELLED_TIME = 'cancelled_time';
    const SUBMITTED_TIME = 'submitted_time';
    const PAID_TIME = 'paid_time';
    const APPEALED_TIME = 'appealed_time';
    const PROCESSING_TIME = 'processing_time';
    const QUOLIFIED_ORDER_TIME = 'quolified_order_time';
    const BAD_ORDER_TIME = 'bad_order_time';
    const DELETED_TIME = 'deleted_time';
    const STATUS_LOG = 'status_log';
    const SEND_METHOD = 'send_method';
    const ADVERTISER_EXPENSE_RECORD = 'advertiser_expense_record';
    const TUIKE_INCOME_RECORD = 'tuike_income_record';
    const SERVICE_INCOME_RECORD = 'service_income_record';
    const VERIFIER = 'verifier';

    const WITH_CAMPAIGN = 'weibo_order.campaign:weibo_campaign.weibo_campaign_id';
    const WITH_INVENTORY = 'weibo_order.inventory:weibo_inventory.weibo_inventory_id';
    const WITH_ADVERTISER = 'weibo_order.advertiser:user.user_id';
    const WITH_TUIKE = 'weibo_order.tuike:user.user_id';
    const WITH_ADVERTISER_EXPENSE_RECORD = 'weibo_order.advertiser_expense_record:user_expense_record.serial_no';
    const WITH_TUIKE_INCOME_RECORD = 'weibo_order.tuike_income_record:user_income_record.serial_no';
    const WITH_SERVICE_INCOME_RECORD = 'weibo_order.service_income_record:service_income_record.service_income_record_id';
    const WITH_VERIFIER = 'weibo_order.verifier:admin.admin_id';

    const TO_PUBLISH = '_publish';
    const TO_CANCEL = '_cancel';
    const TO_EDIT_COMMENT = '_edit_comment';
    const TO_ACCEPT = '_accept';
    const TO_REFUSE = '_refuse';
    const TO_EXPIRE = '_expire';
    const TO_SUBMIT = '_submit';
    const TO_CONFIRM = '_confirm';
    const TO_APPEAL = '_appeal';
    const TO_AUTO_PAY = '_auto_pay';
    const TO_PROCESS = '_process';
    const TO_MARK_QUOLIFIED = '_mark_quolified';
    const TO_MARK_BAD = '_mark_bad';
    const TO_PAY_AFTER_QUOLIFIED = '_pay_after_quolified';

    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                'weibotui',
                'weibo_order',
                'weibo_order_id',
                [
                    'weibo_order_id' => ['name' => _META_('weibotui.weibo_order.weibo_order_id'), 'type' => 'int', 'length' => 20, 'min' => 1, 'required' => true, 'db_insert' => true, 'rou' => true],
                    '_is_deleted' => ['name' => _META_('weibotui.weibo_order._is_deleted'), 'type' => 'bool', 'required' => true, 'db_insert' => true, 'roc' => true, 'rou' => true],
                    '_task_id' => ['name' => _META_('weibotui.weibo_order._task_id'), 'type' => 'int', 'no_input' => true],
                    'price' => ['name' => _META_('weibotui.weibo_order.price'), 'type' => 'money', 'default' => new \Bluefin\Data\InvalidData(), 'rou' => true, 'precision' => 2, 'required' => true],
                    'service_charge' => ['name' => _META_('weibotui.weibo_order.service_charge'), 'type' => 'money', 'default' => new \Bluefin\Data\InvalidData(), 'rou' => true, 'precision' => 2, 'required' => true],
                    'num_audience' => ['name' => _META_('weibotui.weibo_order.num_audience'), 'type' => 'int', 'length' => 20, 'default' => new \Bluefin\Data\InvalidData(), 'rou' => true, 'required' => true],
                    'order_comment' => ['name' => _META_('weibotui.weibo_order.order_comment'), 'type' => 'text', 'max' => 200],
                    'finish_url' => ['name' => _META_('weibotui.weibo_order.finish_url'), 'type' => 'url'],
                    'snapshot_url' => ['name' => _META_('weibotui.weibo_order.snapshot_url'), 'type' => 'url'],
                    'tuike_comment' => ['name' => _META_('weibotui.weibo_order.tuike_comment'), 'type' => 'text', 'max' => 200],
                    'refuse_reason' => ['name' => _META_('weibotui.weibo_order.refuse_reason'), 'type' => 'text', 'max' => 200],
                    'appeal_reason' => ['name' => _META_('weibotui.weibo_order.appeal_reason'), 'type' => 'text', 'max' => 200],
                    'advertiser_rating' => ['name' => _META_('weibotui.weibo_order.advertiser_rating'), 'type' => 'int', 'length' => 1],
                    'advertiser_comment' => ['name' => _META_('weibotui.weibo_order.advertiser_comment'), 'type' => 'text', 'max' => 200],
                    'verifier_comment' => ['name' => _META_('weibotui.weibo_order.verifier_comment'), 'type' => 'text', 'max' => 100],
                    'campaign' => ['name' => _META_('weibotui.weibo_order.campaign'), 'type' => 'int', 'length' => 10, 'min' => 1, 'required' => true, 'rou' => true],
                    'inventory' => ['name' => _META_('weibotui.weibo_order.inventory'), 'type' => 'int', 'length' => 10, 'min' => 1, 'required' => true, 'rou' => true],
                    'advertiser' => ['name' => _META_('weibotui.weibo_order.advertiser'), 'type' => 'int', 'length' => 10, 'min' => 100000, 'required' => true, 'default' => new \Bluefin\Data\InvalidData(), 'rou' => true],
                    'tuike' => ['name' => _META_('weibotui.weibo_order.tuike'), 'type' => 'int', 'length' => 10, 'min' => 100000, 'required' => true, 'default' => new \Bluefin\Data\InvalidData(), 'rou' => true],
                    'status' => ['name' => _META_('weibotui.weibo_order.status'), 'type' => 'idname', 'required' => true, 'state' => new WeiboOrderStatus(), 'db_insert' => true],
                    'unpublished_time' => ['name' => _META_('weibotui.weibo_order.unpublished_time'), 'type' => 'datetime'],
                    'published_time' => ['name' => _META_('weibotui.weibo_order.published_time'), 'type' => 'datetime'],
                    'accepted_time' => ['name' => _META_('weibotui.weibo_order.accepted_time'), 'type' => 'datetime'],
                    'refused_time' => ['name' => _META_('weibotui.weibo_order.refused_time'), 'type' => 'datetime'],
                    'expired_time' => ['name' => _META_('weibotui.weibo_order.expired_time'), 'type' => 'datetime'],
                    'cancelled_time' => ['name' => _META_('weibotui.weibo_order.cancelled_time'), 'type' => 'datetime'],
                    'submitted_time' => ['name' => _META_('weibotui.weibo_order.submitted_time'), 'type' => 'datetime'],
                    'paid_time' => ['name' => _META_('weibotui.weibo_order.paid_time'), 'type' => 'datetime'],
                    'appealed_time' => ['name' => _META_('weibotui.weibo_order.appealed_time'), 'type' => 'datetime'],
                    'processing_time' => ['name' => _META_('weibotui.weibo_order.processing_time'), 'type' => 'datetime'],
                    'quolified_order_time' => ['name' => _META_('weibotui.weibo_order.quolified_order_time'), 'type' => 'datetime'],
                    'bad_order_time' => ['name' => _META_('weibotui.weibo_order.bad_order_time'), 'type' => 'datetime'],
                    'deleted_time' => ['name' => _META_('weibotui.weibo_order.deleted_time'), 'type' => 'datetime'],
                    'status_log' => ['name' => _META_('weibotui.weibo_order.status_log'), 'type' => 'text', 'max' => 1000, 'default' => 'unpublished'],
                    'send_method' => ['name' => _META_('weibotui.weibo_order.send_method'), 'type' => 'text', 'max' => 20, 'required' => true, 'enum' => new WeiboOrderSendMethod(), 'db_insert' => true],
                    'advertiser_expense_record' => ['name' => _META_('weibotui.weibo_order.advertiser_expense_record'), 'type' => 'text', 'length' => 20],
                    'tuike_income_record' => ['name' => _META_('weibotui.weibo_order.tuike_income_record'), 'type' => 'text', 'length' => 20],
                    'service_income_record' => ['name' => _META_('weibotui.weibo_order.service_income_record'), 'type' => 'int', 'length' => 10, 'min' => 1],
                    'verifier' => ['name' => _META_('weibotui.weibo_order.verifier'), 'type' => 'int', 'length' => 10, 'min' => 1000],
                ],
                [
                    'auto_increment_id' => 'weibo_order_id',
                    'logical_deletion' => '_is_deleted',
                    'scheduled_task' => '_task_id',
                    'creator_field' => 'advertiser',
                    'owner_field' => 'tuike',
                    'has_states' => 'status',
                    'unique_keys' => [['campaign', 'inventory']],
                    'triggers' => ['BEFORE-INSERT', 'AFTER-INSERT']
                ],
                [
                    'campaign' => self::WITH_CAMPAIGN,
                    'inventory' => self::WITH_INVENTORY,
                    'advertiser' => self::WITH_ADVERTISER,
                    'tuike' => self::WITH_TUIKE,
                    'advertiser_expense_record' => self::WITH_ADVERTISER_EXPENSE_RECORD,
                    'tuike_income_record' => self::WITH_TUIKE_INCOME_RECORD,
                    'service_income_record' => self::WITH_SERVICE_INCOME_RECORD,
                    'verifier' => self::WITH_VERIFIER,
                ],
                [
                ],
                [
                    Model::OP_CREATE => ['weibotui' => ['advertiser']],
                    Model::OP_GET => ['weibotui' => ['*owner*']],
                    Model::OP_UPDATE => NULL,
                    Model::OP_DELETE => NULL,
                    'get.unpublished' => ['weibotui' => ['*creator*']],
                    'get.published' => ['weibotui' => ['*creator*', '*owner*']],
                    'get.deleted' => ['weibotui' => ['*creator*']],
                    'get.accepted' => ['weibotui' => ['*creator*', '*owner*']],
                    'get.refused' => ['weibotui' => ['*creator*', '*owner*']],
                    'get.expired' => ['weibotui' => ['*creator*', '*owner*']],
                    'get.cancelled' => ['weibotui' => ['*creator*']],
                    'get.submitted' => ['weibotui' => ['*creator*', '*owner*']],
                    'get.paid' => ['weibotui' => ['*creator*', '*owner*']],
                    'get.appealed' => ['weibotui' => ['*creator*', '*owner*']],
                    'get.processing' => ['weibotui' => ['*creator*', '*owner*']],
                    'get.quolified_order' => ['weibotui' => ['*creator*', '*owner*']],
                    'get.bad_order' => ['weibotui' => ['*creator*', '*owner*']],
                    '_publish' => ['unpublished' => ['weibotui' => ['*creator*']], ],
                    '_cancel' => ['unpublished' => ['weibotui' => ['*creator*']], 'published' => ['weibotui' => ['*creator*']], ],
                    '_edit_comment' => ['unpublished' => ['weibotui' => ['*creator*']], ],
                    '_accept' => ['published' => ['weibotui' => ['*owner*']], ],
                    '_refuse' => ['published' => ['weibotui' => ['*owner*']], ],
                    '_expire' => ['published' => ['weibotui' => ['*system*']], ],
                    '_submit' => ['accepted' => ['weibotui' => ['*owner*']], ],
                    '_confirm' => ['submitted' => ['weibotui' => ['*creator*']], ],
                    '_appeal' => ['submitted' => ['weibotui' => ['*creator*']], ],
                    '_auto_pay' => ['submitted' => ['weibotui' => ['*system*']], ],
                    '_process' => ['appealed' => ['wbt_admin' => ['cs_staff']], ],
                    '_mark_quolified' => ['processing' => ['wbt_admin' => ['cs_staff']], ],
                    '_mark_bad' => ['processing' => ['wbt_admin' => ['cs_staff']], ],
                    '_pay_after_quolified' => ['quolified_order' => ['wbt_admin' => ['cs_staff']], ],
                ]
            );
        }

        return self::$__metadata;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doPublish($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doPublish', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_PUBLISH, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToPublish";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function unpublishedToPublish($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::unpublishedToPublish', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_PUBLISH, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'unpublished')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::PUBLISHED);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $weiboOrder->_beforePublished();
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'unpublished']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doCancel($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doCancel', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_CANCEL, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToCancel";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function unpublishedToCancel($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::unpublishedToCancel', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_CANCEL, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'unpublished')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::DELETED);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'unpublished']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterDeleted();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    public static function publishedToCancel($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::publishedToCancel', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_CANCEL, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'published')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::CANCELLED);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'published']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterCancelled();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doAccept($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doAccept', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_ACCEPT, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToAccept";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function publishedToAccept($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::publishedToAccept', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_ACCEPT, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'published')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::ACCEPTED);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'published']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterAccepted();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doRefuse($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doRefuse', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_REFUSE, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToRefuse";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function publishedToRefuse($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::publishedToRefuse', 'diag');

        if (!isset($params)) throw new \Bluefin\Exception\InvalidRequestException();

        $fieldParams = array_get_all($params, ['refuse_reason']);
        _ARG_EXISTS('refuse_reason', $fieldParams);

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_REFUSE, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'published')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::REFUSED);

            //Apply input paramters
            $weiboOrder->apply($fieldParams);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'published']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterRefused();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doExpire($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doExpire', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_EXPIRE, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToExpire";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function publishedToExpire($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::publishedToExpire', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_EXPIRE, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'published')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::EXPIRED);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'published']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterExpired();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doSubmit($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doSubmit', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_SUBMIT, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToSubmit";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function acceptedToSubmit($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::acceptedToSubmit', 'diag');

        if (!isset($params)) throw new \Bluefin\Exception\InvalidRequestException();

        $fieldParams = array_get_all($params, ['finish_url', 'snapshot_url']);
        _ARG_EXISTS('finish_url', $fieldParams);

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_SUBMIT, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'accepted')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::SUBMITTED);

            //Apply input paramters
            $weiboOrder->apply($fieldParams);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'accepted']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterSubmitted();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doConfirm($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doConfirm', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_CONFIRM, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToConfirm";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function submittedToConfirm($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::submittedToConfirm', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_CONFIRM, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'submitted')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::PAID);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $weiboOrder->_beforePaid();
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'submitted']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterPaid();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doAppeal($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doAppeal', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_APPEAL, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToAppeal";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function submittedToAppeal($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::submittedToAppeal', 'diag');

        if (!isset($params)) throw new \Bluefin\Exception\InvalidRequestException();

        $fieldParams = array_get_all($params, ['appeal_reason']);
        _ARG_EXISTS('appeal_reason', $fieldParams);

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_APPEAL, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'submitted')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::APPEALED);

            //Apply input paramters
            $weiboOrder->apply($fieldParams);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'submitted']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterAppealed();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doAutoPay($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doAutoPay', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_AUTO_PAY, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToAutoPay";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function submittedToAutoPay($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::submittedToAutoPay', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_AUTO_PAY, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'submitted')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::PAID);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $weiboOrder->_beforePaid();
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'submitted']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterPaid();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doProcess($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doProcess', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_PROCESS, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToProcess";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function appealedToProcess($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::appealedToProcess', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_PROCESS, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'appealed')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::PROCESSING);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'appealed']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doMarkQuolified($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doMarkQuolified', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_MARK_QUOLIFIED, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToMarkQuolified";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function processingToMarkQuolified($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::processingToMarkQuolified', 'diag');

        if (!isset($params)) throw new \Bluefin\Exception\InvalidRequestException();

        $fieldParams = array_get_all($params, ['verifier_comment']);
        _ARG_EXISTS('verifier_comment', $fieldParams);

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_MARK_QUOLIFIED, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'processing')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::QUOLIFIED_ORDER);

            //Apply input paramters
            $weiboOrder->apply($fieldParams);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $weiboOrder->_beforeQuolifiedOrder();
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'processing']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterQuolifiedOrder();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doMarkBad($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doMarkBad', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_MARK_BAD, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToMarkBad";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function processingToMarkBad($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::processingToMarkBad', 'diag');

        if (!isset($params)) throw new \Bluefin\Exception\InvalidRequestException();

        $fieldParams = array_get_all($params, ['verifier_comment']);
        _ARG_EXISTS('verifier_comment', $fieldParams);

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_MARK_BAD, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'processing')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::BAD_ORDER);

            //Apply input paramters
            $weiboOrder->apply($fieldParams);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $weiboOrder->_beforeBadOrder();
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'processing']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterBadOrder();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    /**
     * @param int $weiboOrderID
     * @param array $params
     * @return \WBT\Model\Weibotui\WeiboOrder
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doPayAfterQuolified($weiboOrderID, array $params = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::doPayAfterQuolified', 'diag');

        if (is_array($weiboOrderID))
        {
            $weiboOrder = new WeiboOrder();
            $weiboOrder->populate($weiboOrderID);
            $weiboOrderID = $weiboOrder->pk();
        }
        else
        {
            $weiboOrder = new WeiboOrder($weiboOrderID);
        }
        _NON_EMPTY($weiboOrder);

        $aclStatus = self::checkActionPermission(self::TO_PAY_AFTER_QUOLIFIED, $weiboOrder->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $weiboOrder->getStatus();
        $methodName = "{$currentState}ToPayAfterQuolified";
        return self::$methodName($weiboOrderID, $params, $weiboOrder);
    }

    public static function quolifiedOrderToPayAfterQuolified($weiboOrderID, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::quolifiedOrderToPayAfterQuolified', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $weiboOrder = $cachedModel;
            }
            else
            {
                $weiboOrder = new WeiboOrder($weiboOrderID);
                _NON_EMPTY($weiboOrder);

                $aclStatus = self::checkActionPermission(self::TO_PAY_AFTER_QUOLIFIED, $weiboOrder->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $weiboOrder->getStatus();
                if ($currentState != 'quolified_order')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $weiboOrder->setStatus(WeiboOrderStatus::PAID);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $weiboOrder->_beforePaid();
            $affected = $weiboOrder->update(['weibo_order_id' => $weiboOrderID, 'status' => 'quolified_order']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            $weiboOrder->_afterPaid();
            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $weiboOrder;
    }

    public function __construct($condition = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition);
        }
        else
        {
            $this->reset();
        }
    }

    public function owner()
    {
        return $this->__get('tuike');
    }

    public function creator()
    {
        return $this->__get('advertiser');
    }

    /**
     * Gets id
     * @return int
     */
    public function getWeiboOrderID()
    {
        return $this->__get(self::WEIBO_ORDER_ID);
    }

    /**
     * Sets id
     * @param int $value
     * @return WeiboOrder
     */
    public function setWeiboOrderID($value)
    {
        $this->__set(self::WEIBO_ORDER_ID, $value);

        return $this;
    }

    /**
     * Gets isdeleted
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->__get(self::_IS_DELETED);
    }

    /**
     * Sets isdeleted
     * @param bool $value
     * @return WeiboOrder
     */
    public function setIsDeleted($value)
    {
        $this->__set(self::_IS_DELETED, $value);

        return $this;
    }

    /**
     * Gets taskid
     * @return int
     */
    public function getTaskID()
    {
        return $this->__get(self::_TASK_ID);
    }

    /**
     * Sets taskid
     * @param int $value
     * @return WeiboOrder
     */
    public function setTaskID($value)
    {
        $this->__set(self::_TASK_ID, $value);

        return $this;
    }

    /**
     * Gets 金额
     * @return float
     */
    public function getPrice()
    {
        return $this->__get(self::PRICE);
    }

    /**
     * Sets 金额
     * @param float $value
     * @return WeiboOrder
     */
    public function setPrice($value)
    {
        $this->__set(self::PRICE, $value);

        return $this;
    }

    /**
     * Gets 服务费
     * @return float
     */
    public function getServiceCharge()
    {
        return $this->__get(self::SERVICE_CHARGE);
    }

    /**
     * Sets 服务费
     * @param float $value
     * @return WeiboOrder
     */
    public function setServiceCharge($value)
    {
        $this->__set(self::SERVICE_CHARGE, $value);

        return $this;
    }

    /**
     * Gets 受众人数
     * @return int
     */
    public function getNumAudience()
    {
        return $this->__get(self::NUM_AUDIENCE);
    }

    /**
     * Sets 受众人数
     * @param int $value
     * @return WeiboOrder
     */
    public function setNumAudience($value)
    {
        $this->__set(self::NUM_AUDIENCE, $value);

        return $this;
    }

    /**
     * Gets 任务备注
     * @return string
     */
    public function getOrderComment()
    {
        return $this->__get(self::ORDER_COMMENT);
    }

    /**
     * Sets 任务备注
     * @param string $value
     * @return WeiboOrder
     */
    public function setOrderComment($value)
    {
        $this->__set(self::ORDER_COMMENT, $value);

        return $this;
    }

    /**
     * Gets 任务链接
     * @return string
     */
    public function getFinishUrl()
    {
        return $this->__get(self::FINISH_URL);
    }

    /**
     * Sets 任务链接
     * @param string $value
     * @return WeiboOrder
     */
    public function setFinishUrl($value)
    {
        $this->__set(self::FINISH_URL, $value);

        return $this;
    }

    /**
     * Gets 任务截图
     * @return string
     */
    public function getSnapshotUrl()
    {
        return $this->__get(self::SNAPSHOT_URL);
    }

    /**
     * Sets 任务截图
     * @param string $value
     * @return WeiboOrder
     */
    public function setSnapshotUrl($value)
    {
        $this->__set(self::SNAPSHOT_URL, $value);

        return $this;
    }

    /**
     * Gets 推客备注
     * @return string
     */
    public function getTuikeComment()
    {
        return $this->__get(self::TUIKE_COMMENT);
    }

    /**
     * Sets 推客备注
     * @param string $value
     * @return WeiboOrder
     */
    public function setTuikeComment($value)
    {
        $this->__set(self::TUIKE_COMMENT, $value);

        return $this;
    }

    /**
     * Gets 拒单理由
     * @return string
     */
    public function getRefuseReason()
    {
        return $this->__get(self::REFUSE_REASON);
    }

    /**
     * Sets 拒单理由
     * @param string $value
     * @return WeiboOrder
     */
    public function setRefuseReason($value)
    {
        $this->__set(self::REFUSE_REASON, $value);

        return $this;
    }

    /**
     * Gets 申诉理由
     * @return string
     */
    public function getAppealReason()
    {
        return $this->__get(self::APPEAL_REASON);
    }

    /**
     * Sets 申诉理由
     * @param string $value
     * @return WeiboOrder
     */
    public function setAppealReason($value)
    {
        $this->__set(self::APPEAL_REASON, $value);

        return $this;
    }

    /**
     * Gets 广告主评价
     * @return int
     */
    public function getAdvertiserRating()
    {
        return $this->__get(self::ADVERTISER_RATING);
    }

    /**
     * Sets 广告主评价
     * @param int $value
     * @return WeiboOrder
     */
    public function setAdvertiserRating($value)
    {
        $this->__set(self::ADVERTISER_RATING, $value);

        return $this;
    }

    /**
     * Gets 广告主备注
     * @return string
     */
    public function getAdvertiserComment()
    {
        return $this->__get(self::ADVERTISER_COMMENT);
    }

    /**
     * Sets 广告主备注
     * @param string $value
     * @return WeiboOrder
     */
    public function setAdvertiserComment($value)
    {
        $this->__set(self::ADVERTISER_COMMENT, $value);

        return $this;
    }

    /**
     * Gets 审核人备注
     * @return string
     */
    public function getVerifierComment()
    {
        return $this->__get(self::VERIFIER_COMMENT);
    }

    /**
     * Sets 审核人备注
     * @param string $value
     * @return WeiboOrder
     */
    public function setVerifierComment($value)
    {
        $this->__set(self::VERIFIER_COMMENT, $value);

        return $this;
    }

    /**
     * Gets 微博广告活动
     * @return int
     */
    public function getCampaign()
    {
        return $this->__get(self::CAMPAIGN);
    }

    /**
     * Sets 微博广告活动
     * @param int $value
     * @return WeiboOrder
     */
    public function setCampaign($value)
    {
        $this->__set(self::CAMPAIGN, $value);

        return $this;
    }

    /**
     * Gets 微博渠道
     * @return int
     */
    public function getInventory()
    {
        return $this->__get(self::INVENTORY);
    }

    /**
     * Sets 微博渠道
     * @param int $value
     * @return WeiboOrder
     */
    public function setInventory($value)
    {
        $this->__set(self::INVENTORY, $value);

        return $this;
    }

    /**
     * Gets 广告主
     * @return int
     */
    public function getAdvertiser()
    {
        return $this->__get(self::ADVERTISER);
    }

    /**
     * Sets 广告主
     * @param int $value
     * @return WeiboOrder
     */
    public function setAdvertiser($value)
    {
        $this->__set(self::ADVERTISER, $value);

        return $this;
    }

    /**
     * Gets 推客
     * @return int
     */
    public function getTuike()
    {
        return $this->__get(self::TUIKE);
    }

    /**
     * Sets 推客
     * @param int $value
     * @return WeiboOrder
     */
    public function setTuike($value)
    {
        $this->__set(self::TUIKE, $value);

        return $this;
    }

    /**
     * Gets 状态
     * @return string
     */
    public function getStatus()
    {
        return $this->__get(self::STATUS);
    }

    /**
     * Gets 状态 display name
     * @return string
     */
    public function getStatus_StateValue()
    {
        $option = $this->metadata()->getFilterOption('status');
        return $option['state']::getDisplayName($this->__get(self::STATUS));
    }

    /**
     * Sets 状态
     * @param string $value
     * @return WeiboOrder
     */
    public function setStatus($value)
    {
        $this->__set(self::STATUS, $value);

        return $this;
    }

    /**
     * Gets 未发布时间
     * @return string
     */
    public function getUnpublishedTime()
    {
        return $this->__get(self::UNPUBLISHED_TIME);
    }

    /**
     * Sets 未发布时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setUnpublishedTime($value)
    {
        $this->__set(self::UNPUBLISHED_TIME, $value);

        return $this;
    }

    /**
     * Gets 已发布时间
     * @return string
     */
    public function getPublishedTime()
    {
        return $this->__get(self::PUBLISHED_TIME);
    }

    /**
     * Sets 已发布时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setPublishedTime($value)
    {
        $this->__set(self::PUBLISHED_TIME, $value);

        return $this;
    }

    /**
     * Gets 已接单时间
     * @return string
     */
    public function getAcceptedTime()
    {
        return $this->__get(self::ACCEPTED_TIME);
    }

    /**
     * Sets 已接单时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setAcceptedTime($value)
    {
        $this->__set(self::ACCEPTED_TIME, $value);

        return $this;
    }

    /**
     * Gets 拒单时间
     * @return string
     */
    public function getRefusedTime()
    {
        return $this->__get(self::REFUSED_TIME);
    }

    /**
     * Sets 拒单时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setRefusedTime($value)
    {
        $this->__set(self::REFUSED_TIME, $value);

        return $this;
    }

    /**
     * Gets 流单时间
     * @return string
     */
    public function getExpiredTime()
    {
        return $this->__get(self::EXPIRED_TIME);
    }

    /**
     * Sets 流单时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setExpiredTime($value)
    {
        $this->__set(self::EXPIRED_TIME, $value);

        return $this;
    }

    /**
     * Gets 已取消时间
     * @return string
     */
    public function getCancelledTime()
    {
        return $this->__get(self::CANCELLED_TIME);
    }

    /**
     * Sets 已取消时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setCancelledTime($value)
    {
        $this->__set(self::CANCELLED_TIME, $value);

        return $this;
    }

    /**
     * Gets 已提交时间
     * @return string
     */
    public function getSubmittedTime()
    {
        return $this->__get(self::SUBMITTED_TIME);
    }

    /**
     * Sets 已提交时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setSubmittedTime($value)
    {
        $this->__set(self::SUBMITTED_TIME, $value);

        return $this;
    }

    /**
     * Gets 已结单时间
     * @return string
     */
    public function getPaidTime()
    {
        return $this->__get(self::PAID_TIME);
    }

    /**
     * Sets 已结单时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setPaidTime($value)
    {
        $this->__set(self::PAID_TIME, $value);

        return $this;
    }

    /**
     * Gets 申诉中时间
     * @return string
     */
    public function getAppealedTime()
    {
        return $this->__get(self::APPEALED_TIME);
    }

    /**
     * Sets 申诉中时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setAppealedTime($value)
    {
        $this->__set(self::APPEALED_TIME, $value);

        return $this;
    }

    /**
     * Gets 审核中时间
     * @return string
     */
    public function getProcessingTime()
    {
        return $this->__get(self::PROCESSING_TIME);
    }

    /**
     * Sets 审核中时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setProcessingTime($value)
    {
        $this->__set(self::PROCESSING_TIME, $value);

        return $this;
    }

    /**
     * Gets 合格时间
     * @return string
     */
    public function getQuolifiedOrderTime()
    {
        return $this->__get(self::QUOLIFIED_ORDER_TIME);
    }

    /**
     * Sets 合格时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setQuolifiedOrderTime($value)
    {
        $this->__set(self::QUOLIFIED_ORDER_TIME, $value);

        return $this;
    }

    /**
     * Gets 坏单时间
     * @return string
     */
    public function getBadOrderTime()
    {
        return $this->__get(self::BAD_ORDER_TIME);
    }

    /**
     * Sets 坏单时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setBadOrderTime($value)
    {
        $this->__set(self::BAD_ORDER_TIME, $value);

        return $this;
    }

    /**
     * Gets 已删除时间
     * @return string
     */
    public function getDeletedTime()
    {
        return $this->__get(self::DELETED_TIME);
    }

    /**
     * Sets 已删除时间
     * @param string $value
     * @return WeiboOrder
     */
    public function setDeletedTime($value)
    {
        $this->__set(self::DELETED_TIME, $value);

        return $this;
    }

    /**
     * Gets 状态历史
     * @return string
     */
    public function getStatusLog()
    {
        return $this->__get(self::STATUS_LOG);
    }

    /**
     * Sets 状态历史
     * @param string $value
     * @return WeiboOrder
     */
    public function setStatusLog($value)
    {
        $this->__set(self::STATUS_LOG, $value);

        return $this;
    }

    /**
     * Gets 发送方式
     * @return string
     */
    public function getSendMethod()
    {
        return $this->__get(self::SEND_METHOD);
    }

    /**
     * Gets 发送方式 display name
     * @return string
     */
    public function getSendMethod_EnumValue()
    {
        $option = $this->metadata()->getFilterOption('send_method');
        return $option['enum']::getDisplayName($this->__get(self::SEND_METHOD));
    }

    /**
     * Sets 发送方式
     * @param string $value
     * @return WeiboOrder
     */
    public function setSendMethod($value)
    {
        $this->__set(self::SEND_METHOD, $value);

        return $this;
    }

    /**
     * Gets 用户支出记录
     * @return string
     */
    public function getAdvertiserExpenseRecord()
    {
        return $this->__get(self::ADVERTISER_EXPENSE_RECORD);
    }

    /**
     * Sets 用户支出记录
     * @param string $value
     * @return WeiboOrder
     */
    public function setAdvertiserExpenseRecord($value)
    {
        $this->__set(self::ADVERTISER_EXPENSE_RECORD, $value);

        return $this;
    }

    /**
     * Gets 用户收入记录
     * @return string
     */
    public function getTuikeIncomeRecord()
    {
        return $this->__get(self::TUIKE_INCOME_RECORD);
    }

    /**
     * Sets 用户收入记录
     * @param string $value
     * @return WeiboOrder
     */
    public function setTuikeIncomeRecord($value)
    {
        $this->__set(self::TUIKE_INCOME_RECORD, $value);

        return $this;
    }

    /**
     * Gets 平台收入
     * @return int
     */
    public function getServiceIncomeRecord()
    {
        return $this->__get(self::SERVICE_INCOME_RECORD);
    }

    /**
     * Sets 平台收入
     * @param int $value
     * @return WeiboOrder
     */
    public function setServiceIncomeRecord($value)
    {
        $this->__set(self::SERVICE_INCOME_RECORD, $value);

        return $this;
    }

    /**
     * Gets 审核人
     * @return int
     */
    public function getVerifier()
    {
        return $this->__get(self::VERIFIER);
    }

    /**
     * Sets 审核人
     * @param int $value
     * @return WeiboOrder
     */
    public function setVerifier($value)
    {
        $this->__set(self::VERIFIER, $value);

        return $this;
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\WeiboCampaign
     */
    public function getCampaign_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\WeiboCampaign();
        }

        if (isset($this->_links['campaign']))
        {
            return $this->_links['campaign'];
        }

        return ($this->_links['campaign'] = new \WBT\Model\Weibotui\WeiboCampaign($this->getCampaign()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\WeiboInventory
     */
    public function getInventory_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\WeiboInventory();
        }

        if (isset($this->_links['inventory']))
        {
            return $this->_links['inventory'];
        }

        return ($this->_links['inventory'] = new \WBT\Model\Weibotui\WeiboInventory($this->getInventory()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\User
     */
    public function getAdvertiser_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\User();
        }

        if (isset($this->_links['advertiser']))
        {
            return $this->_links['advertiser'];
        }

        return ($this->_links['advertiser'] = new \WBT\Model\Weibotui\User($this->getAdvertiser()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\User
     */
    public function getTuike_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\User();
        }

        if (isset($this->_links['tuike']))
        {
            return $this->_links['tuike'];
        }

        return ($this->_links['tuike'] = new \WBT\Model\Weibotui\User($this->getTuike()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\UserExpenseRecord
     */
    public function getAdvertiserExpenseRecord_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\UserExpenseRecord();
        }

        if (isset($this->_links['advertiser_expense_record']))
        {
            return $this->_links['advertiser_expense_record'];
        }

        return ($this->_links['advertiser_expense_record'] = new \WBT\Model\Weibotui\UserExpenseRecord($this->getAdvertiserExpenseRecord()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\UserIncomeRecord
     */
    public function getTuikeIncomeRecord_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\UserIncomeRecord();
        }

        if (isset($this->_links['tuike_income_record']))
        {
            return $this->_links['tuike_income_record'];
        }

        return ($this->_links['tuike_income_record'] = new \WBT\Model\Weibotui\UserIncomeRecord($this->getTuikeIncomeRecord()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\ServiceIncomeRecord
     */
    public function getServiceIncomeRecord_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\ServiceIncomeRecord();
        }

        if (isset($this->_links['service_income_record']))
        {
            return $this->_links['service_income_record'];
        }

        return ($this->_links['service_income_record'] = new \WBT\Model\Weibotui\ServiceIncomeRecord($this->getServiceIncomeRecord()));
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\Admin
     */
    public function getVerifier_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\Admin();
        }

        if (isset($this->_links['verifier']))
        {
            return $this->_links['verifier'];
        }

        return ($this->_links['verifier'] = new \WBT\Model\Weibotui\Admin($this->getVerifier()));
    }

    protected function _beforeInsert()
    {
        App::getInstance()->log()->verbose('WeiboOrder::_beforeInsert', 'diag');
        $inventory = $this->getInventory_();
        $this->price = $inventory->current_price;
        $this->service_charge = $inventory->current_price * $inventory->service_charge_rate;
        $this->num_audience = $inventory->num_audience;
        $this->tuike = $inventory->user;
        
        $campaign = $this->getCampaign_();
        $this->advertiser = $campaign->user;
        
    }

    protected function _afterInsert()
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterInsert', 'diag');
        $campaign = $this->getCampaign_();
        $campaign->total_order++;
        $campaign->estimate_cost += $this->price;
        $campaign->estimate_audience += $this->num_audience;
        $campaign->update();
        
    }

    protected function _beforePublished(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_beforePublished', 'diag');    
        $userExpenseRecord = new UserExpenseRecord();
        $userExpenseRecord
            ->setSerialNo(\WBT\Data\BusinessCode::getSerialNo(UserBusinessType::WEIBO_ORDER, $this->pk()))
            ->setBatchID(\WBT\Data\BusinessCode::getBatchID(UserBusinessType::WEIBO_ORDER, $this->campaign))
            ->setUsage(UserBusinessType::WEIBO_ORDER)
            ->setUser($this->advertiser)
            ->setAmount($this->price)
            ->insert();
        $this->advertiser_expense_record = $userExpenseRecord->pk();
        
    }

    protected function _afterDeleted(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterDeleted', 'diag');    
        $campaign = $this->getCampaign_();
        $campaign->total_order--;
        $campaign->estimate_cost -= $this->price;
        $campaign->estimate_audience -= $this->num_audience;
        $campaign->update();
        
    }

    protected function _afterAccepted(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterAccepted', 'diag');    
        $campaign = $this->getCampaign_();
        $campaign->accepted_order++;
        $campaign->update();
        
    }

    protected function _afterRefused(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterRefused', 'diag');    
        $campaign = $this->getCampaign_();
        $campaign->refused_order++;
        $campaign->estimate_cost -= $this->price;
        $campaign->estimate_audience -= $this->num_audience;
        $campaign->update();
        
    }

    protected function _afterExpired(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterExpired', 'diag');    
        $campaign = $this->getCampaign_();
        $campaign->expired_order++;
        $campaign->update();
        
    }

    protected function _afterCancelled(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterCancelled', 'diag');    
        UserExpenseRecord::doCancel($this->advertiser_expense_record);
        
    }

    protected function _afterSubmitted(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterSubmitted', 'diag');    
        $next3Days = time() + (3 * 24 * 60 * 60);
        
        \Bluefin\Data\Type::convertDatetime(_APP_('Auto-pay time'), $next3Days, \Bluefin\Data\Type::FORMAT_DATETIME);
        
        \WBT\Business\SystemBusiness::postTimerCall(
            $this,
            $next3Days,
            'WeiboOrder::doAutoPay',
            [$this->pk()]
        );
        
    }

    protected function _beforePaid(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_beforePaid', 'diag');    
        $userExpenseRecord = $this->getAdvertiserExpenseRecord_();
        UserExpenseRecord::doPay($userExpenseRecord->data());
        
        $userIncomeRecord = new UserIncomeRecord();
        $userIncomeRecord
            ->setSerialNo($userExpenseRecord->getSerialNo())
            ->setUser($this->tuike)
            ->setAmount($this->price - $this->service_charge)
            ->setSource(UserBusinessType::WEIBO_ORDER)
            ->insert();
        
        $this->tuike_income_record = $userIncomeRecord->pk();
        
        $serviceIncomeRecord = new ServiceIncomeRecord();
        $serviceIncomeRecord->setConsumerExpense($this->advertiser_expense_record)
          ->setSupplierIncome($this->tuike_income_record)
          ->setServiceCharge($this->service_charge)
          ->insert();
        
        $this->service_income_record = $serviceIncomeRecord->pk();
        
    }

    protected function _afterPaid(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterPaid', 'diag');    
        $campaign = $this->getCampaign_();
        $campaign->paid_order++;
        $campaign->actual_cost += $this->price;
        $campaign->actual_audience += $this->num_audience;
        $campaign->update();
        
        \WBT\Business\SystemBusiness::cancelTimerCall($this);
        
    }

    protected function _afterAppealed(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterAppealed', 'diag');    
        \WBT\Business\SystemBusiness::cancelTimerCall($this);
        
    }

    protected function _beforeQuolifiedOrder(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_beforeQuolifiedOrder', 'diag');    
        $this->verifier = App::getInstance()->auth('wbt_admin')->getUniqueID();
        
    }

    protected function _afterQuolifiedOrder(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterQuolifiedOrder', 'diag');    
        self::doPayAfterQuolified($this->pk());
        
    }

    protected function _beforeBadOrder(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_beforeBadOrder', 'diag');    
        $this->verifier = App::getInstance()->auth('wbt_admin')->getUniqueID();
        
    }

    protected function _afterBadOrder(array $INPUT = null)
    {
        App::getInstance()->log()->verbose('WeiboOrder::_afterBadOrder', 'diag');    
        $campaign = $this->getCampaign_();
        $campaign->bad_order++;
        $campaign->update();
        
    }
}
?>