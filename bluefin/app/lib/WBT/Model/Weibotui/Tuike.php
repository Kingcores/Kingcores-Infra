<?php
//Don't edit this file which is generated by Bluefin Lance.
//You can put custom business logic into a Business class under WBT\Business namespace.
namespace WBT\Model\Weibotui;

use Bluefin\App;
use Bluefin\Convention;
use Bluefin\VarText;
use Bluefin\Data\Type;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use Bluefin\Data\DbExpr;

class Tuike extends Model
{
    const ALIPAY = 'alipay';
    const TENPAY = 'tenpay';
    const USER = 'user';
    const STATUS = 'status';
    const UNVERIFIED_TIME = 'unverified_time';
    const WAIT_VERIFY_TIME = 'wait_verify_time';
    const VERIFIED_TIME = 'verified_time';
    const VERIFY_FAILED_TIME = 'verify_failed_time';
    const STATUS_LOG = 'status_log';

    const WITH_USER = 'tuike.user:user.user_id';

    const TO_SUBMIT = '_submit';
    const TO_VERIFY_SUCCEED = '_verify_succeed';
    const TO_VERIFY_FAIL = '_verify_fail';

    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                'weibotui',
                'tuike',
                'user',
                [
                    'alipay' => ['name' => _META_('weibotui.tuike.alipay'), 'type' => 'email'],
                    'tenpay' => ['name' => _META_('weibotui.tuike.tenpay'), 'type' => 'email'],
                    'user' => ['name' => _META_('weibotui.tuike.user'), 'type' => 'int', 'length' => 10, 'min' => 100000, 'required' => true],
                    'status' => ['name' => _META_('weibotui.tuike.status'), 'type' => 'idname', 'required' => true, 'state' => new TuikeStatus(), 'db_insert' => true],
                    'unverified_time' => ['name' => _META_('weibotui.tuike.unverified_time'), 'type' => 'datetime'],
                    'wait_verify_time' => ['name' => _META_('weibotui.tuike.wait_verify_time'), 'type' => 'datetime'],
                    'verified_time' => ['name' => _META_('weibotui.tuike.verified_time'), 'type' => 'datetime'],
                    'verify_failed_time' => ['name' => _META_('weibotui.tuike.verify_failed_time'), 'type' => 'datetime'],
                    'status_log' => ['name' => _META_('weibotui.tuike.status_log'), 'type' => 'text', 'max' => 1000, 'default' => 'unverified'],
                ],
                [
                    'owner_field' => 'user',
                    'has_states' => 'status',
                    'triggers' => ['AFTER-INSERT']
                ],
                [
                    'user' => self::WITH_USER,
                ],
                [
                ],
                [
                    Model::OP_CREATE => NULL,
                    Model::OP_GET => NULL,
                    Model::OP_UPDATE => NULL,
                    Model::OP_DELETE => NULL,
                    '_submit' => ['unverified' => ['weibotui' => ['*owner*']], 'verify_failed' => ['weibotui' => ['*owner*']], ],
                    '_verify_succeed' => ['wait_verify' => [], ],
                    '_verify_fail' => ['wait_verify' => [], ],
                ]
            );
        }

        return self::$__metadata;
    }

    /**
     * @param int $user
     * @param array $params
     * @return \WBT\Model\Weibotui\Tuike
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doSubmit($user, array $params = null)
    {
        App::getInstance()->log()->verbose('Tuike::doSubmit', 'diag');

        if (is_array($user))
        {
            $tuike = new Tuike();
            $tuike->populate($user);
            $user = $tuike->pk();
        }
        else
        {
            $tuike = new Tuike($user);
        }
        _NON_EMPTY($tuike);

        $aclStatus = self::checkActionPermission(self::TO_SUBMIT, $tuike->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $tuike->getStatus();
        $methodName = "{$currentState}ToSubmit";
        return self::$methodName($user, $params, $tuike);
    }

    public static function unverifiedToSubmit($user, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('Tuike::unverifiedToSubmit', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $tuike = $cachedModel;
            }
            else
            {
                $tuike = new Tuike($user);
                _NON_EMPTY($tuike);

                $aclStatus = self::checkActionPermission(self::TO_SUBMIT, $tuike->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $tuike->getStatus();
                if ($currentState != 'unverified')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $tuike->setStatus(TuikeStatus::WAIT_VERIFY);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $tuike->update(['user' => $user, 'status' => 'unverified']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $tuike;
    }

    public static function verifyFailedToSubmit($user, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('Tuike::verifyFailedToSubmit', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $tuike = $cachedModel;
            }
            else
            {
                $tuike = new Tuike($user);
                _NON_EMPTY($tuike);

                $aclStatus = self::checkActionPermission(self::TO_SUBMIT, $tuike->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $tuike->getStatus();
                if ($currentState != 'verify_failed')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $tuike->setStatus(TuikeStatus::WAIT_VERIFY);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $tuike->update(['user' => $user, 'status' => 'verify_failed']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $tuike;
    }

    /**
     * @param int $user
     * @param array $params
     * @return \WBT\Model\Weibotui\Tuike
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doVerifySucceed($user, array $params = null)
    {
        App::getInstance()->log()->verbose('Tuike::doVerifySucceed', 'diag');

        if (is_array($user))
        {
            $tuike = new Tuike();
            $tuike->populate($user);
            $user = $tuike->pk();
        }
        else
        {
            $tuike = new Tuike($user);
        }
        _NON_EMPTY($tuike);

        $aclStatus = self::checkActionPermission(self::TO_VERIFY_SUCCEED, $tuike->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $tuike->getStatus();
        $methodName = "{$currentState}ToVerifySucceed";
        return self::$methodName($user, $params, $tuike);
    }

    public static function waitVerifyToVerifySucceed($user, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('Tuike::waitVerifyToVerifySucceed', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $tuike = $cachedModel;
            }
            else
            {
                $tuike = new Tuike($user);
                _NON_EMPTY($tuike);

                $aclStatus = self::checkActionPermission(self::TO_VERIFY_SUCCEED, $tuike->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $tuike->getStatus();
                if ($currentState != 'wait_verify')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $tuike->setStatus(TuikeStatus::VERIFIED);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $tuike->update(['user' => $user, 'status' => 'wait_verify']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $tuike;
    }

    /**
     * @param int $user
     * @param array $params
     * @return \WBT\Model\Weibotui\Tuike
     * @throws \Bluefin\Exception\RequestException
     */
    public static function doVerifyFail($user, array $params = null)
    {
        App::getInstance()->log()->verbose('Tuike::doVerifyFail', 'diag');

        if (is_array($user))
        {
            $tuike = new Tuike();
            $tuike->populate($user);
            $user = $tuike->pk();
        }
        else
        {
            $tuike = new Tuike($user);
        }
        _NON_EMPTY($tuike);

        $aclStatus = self::checkActionPermission(self::TO_VERIFY_FAIL, $tuike->data());
        if ($aclStatus !== Model::ACL_ACCEPTED)
        {
            if (ENV == 'dev')
            {
                throw new \Bluefin\Exception\RequestException(\Bluefin\Common::getStatusCodeMessage($aclStatus) . ' @ ' . __METHOD__, $aclStatus);
            }
            throw new \Bluefin\Exception\RequestException(null, $aclStatus);
        }

        $currentState = $tuike->getStatus();
        $methodName = "{$currentState}ToVerifyFail";
        return self::$methodName($user, $params, $tuike);
    }

    public static function waitVerifyToVerifyFail($user, array $params = null, Model $cachedModel = null)
    {
        App::getInstance()->log()->verbose('Tuike::waitVerifyToVerifyFail', 'diag');

        $db = self::s_metadata()->getDatabase()->getAdapter();
        $db->beginTransaction();

        try
        {
            if (isset($cachedModel))
            {
                $tuike = $cachedModel;
            }
            else
            {
                $tuike = new Tuike($user);
                _NON_EMPTY($tuike);

                $aclStatus = self::checkActionPermission(self::TO_VERIFY_FAIL, $tuike->data());
                if ($aclStatus !== Model::ACL_ACCEPTED)
                {
                    throw new \Bluefin\Exception\RequestException(null, $aclStatus);
                }

                $currentState = $tuike->getStatus();
                if ($currentState != 'wait_verify')
                {
                    throw new \Bluefin\Exception\InvalidRequestException();
                }
            }

            //Set target state
            $tuike->setStatus(TuikeStatus::VERIFY_FAILED);

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, true);
            $affected = $tuike->update(['user' => $user, 'status' => 'wait_verify']);
            if ($affected <= 0)
            {
                App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);
                throw new \Bluefin\Exception\DataException(_APP_("The record to operate is not in expected state."));
            }

            App::getInstance()->setRegistry(Convention::KEYWORD_SYSTEM_ROLE, false);

            $db->commit();
        }
        catch (\Exception $e)
        {
            $db->rollback();

            throw $e;
        }

        return $tuike;
    }

    public function __construct($condition = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition);
        }
        else
        {
            $this->reset();
        }
    }

    public function owner()
    {
        return $this->__get('user');
    }

    /**
     * Gets 支付宝账号
     * @return string
     */
    public function getAlipay()
    {
        return $this->__get(self::ALIPAY);
    }

    /**
     * Sets 支付宝账号
     * @param string $value
     * @return Tuike
     */
    public function setAlipay($value)
    {
        $this->__set(self::ALIPAY, $value);

        return $this;
    }

    /**
     * Gets 财付通账号
     * @return string
     */
    public function getTenpay()
    {
        return $this->__get(self::TENPAY);
    }

    /**
     * Sets 财付通账号
     * @param string $value
     * @return Tuike
     */
    public function setTenpay($value)
    {
        $this->__set(self::TENPAY, $value);

        return $this;
    }

    /**
     * Gets 用户
     * @return int
     */
    public function getUser()
    {
        return $this->__get(self::USER);
    }

    /**
     * Sets 用户
     * @param int $value
     * @return Tuike
     */
    public function setUser($value)
    {
        $this->__set(self::USER, $value);

        return $this;
    }

    /**
     * Gets 推客状态
     * @return string
     */
    public function getStatus()
    {
        return $this->__get(self::STATUS);
    }

    /**
     * Gets 推客状态 display name
     * @return string
     */
    public function getStatus_StateValue()
    {
        $option = $this->metadata()->getFilterOption('status');
        return $option['state']::getDisplayName($this->__get(self::STATUS));
    }

    /**
     * Sets 推客状态
     * @param string $value
     * @return Tuike
     */
    public function setStatus($value)
    {
        $this->__set(self::STATUS, $value);

        return $this;
    }

    /**
     * Gets 未审核时间
     * @return string
     */
    public function getUnverifiedTime()
    {
        return $this->__get(self::UNVERIFIED_TIME);
    }

    /**
     * Sets 未审核时间
     * @param string $value
     * @return Tuike
     */
    public function setUnverifiedTime($value)
    {
        $this->__set(self::UNVERIFIED_TIME, $value);

        return $this;
    }

    /**
     * Gets 待审核时间
     * @return string
     */
    public function getWaitVerifyTime()
    {
        return $this->__get(self::WAIT_VERIFY_TIME);
    }

    /**
     * Sets 待审核时间
     * @param string $value
     * @return Tuike
     */
    public function setWaitVerifyTime($value)
    {
        $this->__set(self::WAIT_VERIFY_TIME, $value);

        return $this;
    }

    /**
     * Gets 已审核时间
     * @return string
     */
    public function getVerifiedTime()
    {
        return $this->__get(self::VERIFIED_TIME);
    }

    /**
     * Sets 已审核时间
     * @param string $value
     * @return Tuike
     */
    public function setVerifiedTime($value)
    {
        $this->__set(self::VERIFIED_TIME, $value);

        return $this;
    }

    /**
     * Gets 审核未通过时间
     * @return string
     */
    public function getVerifyFailedTime()
    {
        return $this->__get(self::VERIFY_FAILED_TIME);
    }

    /**
     * Sets 审核未通过时间
     * @param string $value
     * @return Tuike
     */
    public function setVerifyFailedTime($value)
    {
        $this->__set(self::VERIFY_FAILED_TIME, $value);

        return $this;
    }

    /**
     * Gets 推客状态历史
     * @return string
     */
    public function getStatusLog()
    {
        return $this->__get(self::STATUS_LOG);
    }

    /**
     * Sets 推客状态历史
     * @param string $value
     * @return Tuike
     */
    public function setStatusLog($value)
    {
        $this->__set(self::STATUS_LOG, $value);

        return $this;
    }

    /**
     * @param bool $new
     * @return \WBT\Model\Weibotui\User
     */
    public function getUser_($new = false)
    {
        if ($new)
        {
            return new \WBT\Model\Weibotui\User();
        }

        if (isset($this->_links['user']))
        {
            return $this->_links['user'];
        }

        return ($this->_links['user'] = new \WBT\Model\Weibotui\User($this->getUser()));
    }

    protected function _afterInsert()
    {
        App::getInstance()->log()->verbose('Tuike::_afterInsert', 'diag');
        $userWithRole = new UserWithRole();
        $userWithRole->setUser($this->getUser())
           ->setRole(UserRole::TUIKE)
           ->insert(true);
        
    }
}
?>