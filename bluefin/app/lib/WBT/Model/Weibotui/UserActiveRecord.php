<?php
//Don't edit this file which is generated by Bluefin Lance.
//You can put custom business logic into a Business class under WBT\Business namespace.
namespace WBT\Model\Weibotui;

use Bluefin\App;
use Bluefin\Convention;
use Bluefin\VarText;
use Bluefin\Data\Type;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use Bluefin\Data\DbExpr;

class UserActiveRecord extends Model
{
    const USER_ACTIVE_RECORD_ID = 'user_active_record_id';
    const _CREATED_AT = '_created_at';
    const _UPDATED_AT = '_updated_at';
    const USERNAME = 'username';
    const ACTIVE_TOKEN = 'active_token';



    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                'weibotui',
                'user_active_record',
                'user_active_record_id',
                [
                    'user_active_record_id' => ['name' => _META_('weibotui.user_active_record.user_active_record_id'), 'type' => 'int', 'length' => 10, 'min' => 200000, 'required' => true, 'db_insert' => true, 'rou' => true],
                    '_created_at' => ['name' => _META_('weibotui.user_active_record._created_at'), 'type' => 'timestamp', 'required' => true, 'default' => new DbExpr('NOW()'), 'roc' => true, 'rou' => true],
                    '_updated_at' => ['name' => _META_('weibotui.user_active_record._updated_at'), 'type' => 'timestamp', 'required' => true, 'db_insert' => true, 'roc' => true, 'rou' => true],
                    'username' => ['name' => _META_('weibotui.user_active_record.username'), 'type' => 'text', 'length' => 128, 'required' => true],
                    'active_token' => ['name' => _META_('weibotui.user_active_record.active_token'), 'type' => 'text', 'length' => 64, 'required' => true],
                ],
                [
                    'auto_increment_id' => 'user_active_record_id',
                    'create_timestamp' => '_created_at',
                    'update_timestamp' => '_updated_at',
                ],
                [
                ],
                [
                ],
                [
                    Model::OP_CREATE => NULL,
                    Model::OP_GET => NULL,
                    Model::OP_UPDATE => NULL,
                    Model::OP_DELETE => NULL,
                ]
            );
        }

        return self::$__metadata;
    }

    public function __construct($condition = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition);
        }
        else
        {
            $this->reset();
        }
    }

    /**
     * Gets id
     * @return int
     */
    public function getUserActiveRecordID()
    {
        return $this->__get(self::USER_ACTIVE_RECORD_ID);
    }

    /**
     * Sets id
     * @param int $value
     * @return UserActiveRecord
     */
    public function setUserActiveRecordID($value)
    {
        $this->__set(self::USER_ACTIVE_RECORD_ID, $value);

        return $this;
    }

    /**
     * Gets createdat
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->__get(self::_CREATED_AT);
    }

    /**
     * Sets createdat
     * @param string $value
     * @return UserActiveRecord
     */
    public function setCreatedAt($value)
    {
        $this->__set(self::_CREATED_AT, $value);

        return $this;
    }

    /**
     * Gets updatedat
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->__get(self::_UPDATED_AT);
    }

    /**
     * Sets updatedat
     * @param string $value
     * @return UserActiveRecord
     */
    public function setUpdatedAt($value)
    {
        $this->__set(self::_UPDATED_AT, $value);

        return $this;
    }

    /**
     * Gets 用户账号
     * @return string
     */
    public function getUsername()
    {
        return $this->__get(self::USERNAME);
    }

    /**
     * Sets 用户账号
     * @param string $value
     * @return UserActiveRecord
     */
    public function setUsername($value)
    {
        $this->__set(self::USERNAME, $value);

        return $this;
    }

    /**
     * Gets 验证token
     * @return string
     */
    public function getActiveToken()
    {
        return $this->__get(self::ACTIVE_TOKEN);
    }

    /**
     * Sets 验证token
     * @param string $value
     * @return UserActiveRecord
     */
    public function setActiveToken($value)
    {
        $this->__set(self::ACTIVE_TOKEN, $value);

        return $this;
    }

    public function insert($updateIfDuplicate = false)
    {
        $data = $this->filter(true);

        if ($updateIfDuplicate)
        {
            $updateData = $data;
            unset($updateData[$this->_metadata->getPrimaryKey()]);
            $affected = $this->_metadata->getDatabase()->insert($this->_metadata, $data, $updateData);
        }
        else
        {
            $affected = $this->_metadata->getDatabase()->insert($this->_metadata, $data);
            if (0 === $affected)
            {
                throw new \Bluefin\Exception\DatabaseException(
                    "Inserting data into table '{$this->_metadata->getModelName()}' failed."
                );
            }
        }

        if ($affected > 0 && $this->_metadata->hasFeature(Convention::FEATURE_AUTO_INCREMENT_ID))
        {
            $id = $this->_metadata->getDatabase()->getAdapter()->lastInsertId($this->_metadata->getModelName(), $this->_metadata->getPrimaryKey());
            $data[$this->_metadata->getPrimaryKey()] = $id;
        }

        $this->apply($data, false, true);

        return $affected;
    }

    public function update($condition = null)
    {
        if (!isset($condition))
        {
            if ($this->isEmpty()) return -1;
            $condition = [$this->_metadata->getPrimaryKey() => $this->pk()];
        }
        else if (!is_array($condition))
        {
            $condition = [$this->_metadata->getPrimaryKey() => $condition];
        }
        else 
        {
            $pk = $condition[$this->_metadata->getPrimaryKey()];
            if (!isset($pk))
            {
                throw new \Bluefin\Exception\InvalidOperationException("Batch-update is not allowed in this method!");
            }
            
            if (is_array($pk) || $pk instanceof DbExpr)
            {
                throw new \Bluefin\Exception\InvalidOperationException("Invalid primary key value!");
            }
        }

        if (!$this->_isPopulated)
        {
            $modified = array_get_all($this->_data, $this->_modifiedFields);            
            if (!$this->load($condition)) return -1;
            $this->apply($modified);
        }
        
        $this->__unset($this->_metadata->getPrimaryKey());
        $affected = -1;

        $data = $this->filter();

        if (!empty($data))
        {
            $affected = $this->_metadata->getDatabase()->update($this->_metadata, $data, $condition);
            $data[$this->_metadata->getPrimaryKey()] = $condition[$this->_metadata->getPrimaryKey()];
            $this->apply($data, false, true);
        }

        return $affected;
    }

    public function delete($condition = null)
    {
        if (!isset($condition))
        {
            if ($this->isEmpty()) return -1;
            $condition = [$this->_metadata->getPrimaryKey() => $this->pk()];
        }
        else if (!is_array($condition))
        {
            $condition = [$this->_metadata->getPrimaryKey() => $condition];
        }
        else 
        {
            $pk = $condition[$this->_metadata->getPrimaryKey()];
            if (!isset($pk))
            {
                throw new \Bluefin\Exception\InvalidOperationException("Batch-delete is not allowed in this method!");
            }
            
            if (is_array($pk) || $pk instanceof DbExpr)
            {
                throw new \Bluefin\Exception\InvalidOperationException("Invalid primary key value!");
            }
        }
        
        if (!$this->_isPopulated && !$this->load($condition))
        {
            return -1;
        }

        $affected = $this->_metadata->getDatabase()->delete($this->_metadata, $condition, true);

        return $affected;
    }
}
?>