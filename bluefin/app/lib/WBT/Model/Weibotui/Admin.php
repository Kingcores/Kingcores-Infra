<?php
//Don't edit this file which is generated by Bluefin Lance.
//You can put custom business logic into a Business class under WBT\Business namespace.
namespace WBT\Model\Weibotui;

use Bluefin\App;
use Bluefin\Convention;
use Bluefin\VarText;
use Bluefin\Data\Type;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use Bluefin\Data\DbExpr;

class Admin extends Model
{
    const ADMIN_ID = 'admin_id';
    const _CREATED_AT = '_created_at';
    const _UPDATED_AT = '_updated_at';
    const _IS_DELETED = '_is_deleted';
    const USERNAME = 'username';
    const PASSWORD = 'password';
    const PASSWORD_SALT = 'password_salt';
    const STATUS = 'status';
    const NONACTIVATED_TIME = 'nonactivated_time';
    const ACTIVATED_TIME = 'activated_time';
    const DISABLED_TIME = 'disabled_time';
    const STATUS_LOG = 'status_log';



    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                'weibotui',
                'admin',
                'admin_id',
                [
                    'admin_id' => ['name' => _META_('weibotui.admin.admin_id'), 'type' => 'int', 'length' => 10, 'min' => 1000, 'required' => true, 'db_insert' => true, 'rou' => true],
                    '_created_at' => ['name' => _META_('weibotui.admin._created_at'), 'type' => 'timestamp', 'required' => true, 'default' => new DbExpr('NOW()'), 'roc' => true, 'rou' => true],
                    '_updated_at' => ['name' => _META_('weibotui.admin._updated_at'), 'type' => 'timestamp', 'required' => true, 'db_insert' => true, 'roc' => true, 'rou' => true],
                    '_is_deleted' => ['name' => _META_('weibotui.admin._is_deleted'), 'type' => 'bool', 'required' => true, 'db_insert' => true, 'roc' => true, 'rou' => true],
                    'username' => ['name' => _META_('weibotui.admin.username'), 'type' => 'idname', 'filter' => new \Bluefin\Data\Functor\VarTextProvider('{{this.username|trim|L}}'), 'required' => true],
                    'password' => ['name' => _META_('weibotui.admin.password'), 'type' => 'password', 'default' => new \Bluefin\Data\Functor\AutoPassword(), 'filter' => new \Bluefin\Data\Functor\VarTextProvider('{{this.password|md5_salt=this.password_salt}}'), 'required' => true],
                    'password_salt' => ['name' => _META_('weibotui.admin.password_salt'), 'type' => 'digits', 'length' => 8, 'default' => new \Bluefin\Data\Functor\AutoDigits(), 'roc' => true, 'rou' => true, 'required' => true],
                    'status' => ['name' => _META_('weibotui.admin.status'), 'type' => 'idname', 'required' => true, 'state' => new UserStatus(), 'db_insert' => true],
                    'nonactivated_time' => ['name' => _META_('weibotui.admin.nonactivated_time'), 'type' => 'datetime'],
                    'activated_time' => ['name' => _META_('weibotui.admin.activated_time'), 'type' => 'datetime'],
                    'disabled_time' => ['name' => _META_('weibotui.admin.disabled_time'), 'type' => 'datetime'],
                    'status_log' => ['name' => _META_('weibotui.admin.status_log'), 'type' => 'text', 'max' => 1000, 'default' => 'nonactivated'],
                ],
                [
                    'auto_increment_id' => 'admin_id',
                    'create_timestamp' => '_created_at',
                    'update_timestamp' => '_updated_at',
                    'logical_deletion' => '_is_deleted',
                    'has_states' => 'status',
                    'unique_keys' => [['username']],
                ],
                [
                ],
                [
                    'admin_with_role' => ['admin_id', 'admin', false, 'role', 'admin_role', 'role_name'],
                ],
                [
                    Model::OP_CREATE => NULL,
                    Model::OP_GET => NULL,
                    Model::OP_UPDATE => NULL,
                    Model::OP_DELETE => NULL,
                ]
            );
        }

        return self::$__metadata;
    }

    public function __construct($condition = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition);
        }
        else
        {
            $this->reset();
        }
    }

    /**
     * Gets id
     * @return int
     */
    public function getAdminID()
    {
        return $this->__get(self::ADMIN_ID);
    }

    /**
     * Sets id
     * @param int $value
     * @return Admin
     */
    public function setAdminID($value)
    {
        $this->__set(self::ADMIN_ID, $value);

        return $this;
    }

    /**
     * Gets createdat
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->__get(self::_CREATED_AT);
    }

    /**
     * Sets createdat
     * @param string $value
     * @return Admin
     */
    public function setCreatedAt($value)
    {
        $this->__set(self::_CREATED_AT, $value);

        return $this;
    }

    /**
     * Gets updatedat
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->__get(self::_UPDATED_AT);
    }

    /**
     * Sets updatedat
     * @param string $value
     * @return Admin
     */
    public function setUpdatedAt($value)
    {
        $this->__set(self::_UPDATED_AT, $value);

        return $this;
    }

    /**
     * Gets isdeleted
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->__get(self::_IS_DELETED);
    }

    /**
     * Sets isdeleted
     * @param bool $value
     * @return Admin
     */
    public function setIsDeleted($value)
    {
        $this->__set(self::_IS_DELETED, $value);

        return $this;
    }

    /**
     * Gets 用户账号
     * @return string
     */
    public function getUsername()
    {
        return $this->__get(self::USERNAME);
    }

    /**
     * Sets 用户账号
     * @param string $value
     * @return Admin
     */
    public function setUsername($value)
    {
        $this->__set(self::USERNAME, $value);

        return $this;
    }

    /**
     * Gets 密码
     * @return string
     */
    public function getPassword()
    {
        return $this->__get(self::PASSWORD);
    }

    /**
     * Sets 密码
     * @param string $value
     * @return Admin
     */
    public function setPassword($value)
    {
        $this->__set(self::PASSWORD, $value);

        return $this;
    }

    /**
     * Gets 干扰码
     * @return string
     */
    public function getPasswordSalt()
    {
        return $this->__get(self::PASSWORD_SALT);
    }

    /**
     * Sets 干扰码
     * @param string $value
     * @return Admin
     */
    public function setPasswordSalt($value)
    {
        $this->__set(self::PASSWORD_SALT, $value);

        return $this;
    }

    /**
     * Gets 用户状态
     * @return string
     */
    public function getStatus()
    {
        return $this->__get(self::STATUS);
    }

    /**
     * Gets 用户状态 display name
     * @return string
     */
    public function getStatus_StateValue()
    {
        $option = $this->metadata()->getFilterOption('status');
        return $option['state']::getDisplayName($this->__get(self::STATUS));
    }

    /**
     * Sets 用户状态
     * @param string $value
     * @return Admin
     */
    public function setStatus($value)
    {
        $this->__set(self::STATUS, $value);

        return $this;
    }

    /**
     * Gets 未激活时间
     * @return string
     */
    public function getNonactivatedTime()
    {
        return $this->__get(self::NONACTIVATED_TIME);
    }

    /**
     * Sets 未激活时间
     * @param string $value
     * @return Admin
     */
    public function setNonactivatedTime($value)
    {
        $this->__set(self::NONACTIVATED_TIME, $value);

        return $this;
    }

    /**
     * Gets 正常时间
     * @return string
     */
    public function getActivatedTime()
    {
        return $this->__get(self::ACTIVATED_TIME);
    }

    /**
     * Sets 正常时间
     * @param string $value
     * @return Admin
     */
    public function setActivatedTime($value)
    {
        $this->__set(self::ACTIVATED_TIME, $value);

        return $this;
    }

    /**
     * Gets 已禁用时间
     * @return string
     */
    public function getDisabledTime()
    {
        return $this->__get(self::DISABLED_TIME);
    }

    /**
     * Sets 已禁用时间
     * @param string $value
     * @return Admin
     */
    public function setDisabledTime($value)
    {
        $this->__set(self::DISABLED_TIME, $value);

        return $this;
    }

    /**
     * Gets 用户状态历史
     * @return string
     */
    public function getStatusLog()
    {
        return $this->__get(self::STATUS_LOG);
    }

    /**
     * Sets 用户状态历史
     * @param string $value
     * @return Admin
     */
    public function setStatusLog($value)
    {
        $this->__set(self::STATUS_LOG, $value);

        return $this;
    }
}
?>